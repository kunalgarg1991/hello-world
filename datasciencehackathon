{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4yL5DJpoemyb"
      },
      "source": [
        "**Chapter 2 – End-to-end Machine Learning project**\n",
        "\n",
        "*Welcome to Machine Learning Housing Corp.! Your task is to predict median house values in Californian districts, given a number of features from these districts.*\n",
        "\n",
        "*This notebook contains all the sample code and solutions to the exercices in chapter 2.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vRTxlZSOemye"
      },
      "source": [
        "<table align=\"left\">\n",
        "  <td>\n",
        "    <a href=\"https://colab.research.google.com/github/ageron/handson-ml2/blob/master/02_end_to_end_machine_learning_project.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n",
        "  </td>\n",
        "  <td>\n",
        "    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/ageron/handson-ml2/blob/master/02_end_to_end_machine_learning_project.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n",
        "  </td>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ui6k9UbGemyf"
      },
      "source": [
        "# Setup"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_5z_blpMemyf"
      },
      "source": [
        "First, let's import a few common modules, ensure MatplotLib plots figures inline and prepare a function to save the figures. We also check that Python 3.5 or later is installed (although Python 2.x may work, it is deprecated so we strongly recommend you use Python 3 instead), as well as Scikit-Learn ≥0.20."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "YSToUT67emyg"
      },
      "outputs": [],
      "source": [
        "# Python ≥3.5 is required\n",
        "import sys\n",
        "assert sys.version_info >= (3, 5)\n",
        "\n",
        "# Scikit-Learn ≥0.20 is required\n",
        "import sklearn\n",
        "assert sklearn.__version__ >= \"0.20\"\n",
        "\n",
        "# Common imports\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "# To plot pretty figures\n",
        "%matplotlib inline\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "mpl.rc('axes', labelsize=14)\n",
        "mpl.rc('xtick', labelsize=12)\n",
        "mpl.rc('ytick', labelsize=12)\n",
        "\n",
        "# Where to save the figures\n",
        "PROJECT_ROOT_DIR = \".\"\n",
        "CHAPTER_ID = \"end_to_end_project\"\n",
        "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
        "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
        "\n",
        "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
        "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
        "    print(\"Saving figure\", fig_id)\n",
        "    if tight_layout:\n",
        "        plt.tight_layout()\n",
        "    plt.savefig(path, format=fig_extension, dpi=resolution)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x86YTzIwemyh"
      },
      "source": [
        "# Get the Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GJHZS8oqemyh"
      },
      "source": [
        "## Download the Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "ycUkeePzemyi"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import tarfile\n",
        "import urllib.request\n",
        "import pandas as pd\n",
        "\n",
        "df=pd.read_csv(\"case_study_data.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1OBDN6Kdemyj"
      },
      "source": [
        "## Take a Quick Look at the Data Structure"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "0hwQg1Xfemyj",
        "outputId": "eed38a3a-39f7-4560-d1b8-dc569721077d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "0   28.767169  161.966498   81.872549   99.835205  269.739988  203.647127   \n",
              "1  218.938143  119.791942  167.343711  193.325205  -79.015534   53.199300   \n",
              "2   73.635323  221.318585   99.913021  -22.305286  228.404987  111.664161   \n",
              "3  254.599403    9.245377  151.656239   93.377091  -31.668459   92.511416   \n",
              "4  290.040861  161.374547   70.177088   74.350879  230.188671  230.777534   \n",
              "\n",
              "    feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "0  249.435960  117.578044  127.856154  111.061091  126.024153  177.980983   \n",
              "1  146.831591  122.634255   73.221506   79.423254  110.618714  -23.065378   \n",
              "2  257.811522   59.378286   61.426489   86.798618   45.785137   78.697077   \n",
              "3  198.598885   66.328654  232.164797  215.983485  192.334588  266.697438   \n",
              "4  251.258058  183.337692  240.107252  278.940438  183.484400  137.560854   \n",
              "\n",
              "   feature_13  feature_14  feature_15      target cat_feature_1 cat_feature_2  \n",
              "0  152.021918  319.135333  140.016792  112.977020          High    Category_A  \n",
              "1  133.769639  273.784216   60.854829  105.844625           Low    Category_A  \n",
              "2  196.370792   -2.577077  -22.645914   93.708970           Low    Category_B  \n",
              "3  147.023177  170.750747  105.240839  115.455498           Low    Category_A  \n",
              "4  169.524114  172.233807    0.996204  187.083308          High    Category_C  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-45674a1f-5f4b-4b36-b5e8-5122ef12b56d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>28.767169</td>\n",
              "      <td>161.966498</td>\n",
              "      <td>81.872549</td>\n",
              "      <td>99.835205</td>\n",
              "      <td>269.739988</td>\n",
              "      <td>203.647127</td>\n",
              "      <td>249.435960</td>\n",
              "      <td>117.578044</td>\n",
              "      <td>127.856154</td>\n",
              "      <td>111.061091</td>\n",
              "      <td>126.024153</td>\n",
              "      <td>177.980983</td>\n",
              "      <td>152.021918</td>\n",
              "      <td>319.135333</td>\n",
              "      <td>140.016792</td>\n",
              "      <td>112.977020</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>218.938143</td>\n",
              "      <td>119.791942</td>\n",
              "      <td>167.343711</td>\n",
              "      <td>193.325205</td>\n",
              "      <td>-79.015534</td>\n",
              "      <td>53.199300</td>\n",
              "      <td>146.831591</td>\n",
              "      <td>122.634255</td>\n",
              "      <td>73.221506</td>\n",
              "      <td>79.423254</td>\n",
              "      <td>110.618714</td>\n",
              "      <td>-23.065378</td>\n",
              "      <td>133.769639</td>\n",
              "      <td>273.784216</td>\n",
              "      <td>60.854829</td>\n",
              "      <td>105.844625</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>73.635323</td>\n",
              "      <td>221.318585</td>\n",
              "      <td>99.913021</td>\n",
              "      <td>-22.305286</td>\n",
              "      <td>228.404987</td>\n",
              "      <td>111.664161</td>\n",
              "      <td>257.811522</td>\n",
              "      <td>59.378286</td>\n",
              "      <td>61.426489</td>\n",
              "      <td>86.798618</td>\n",
              "      <td>45.785137</td>\n",
              "      <td>78.697077</td>\n",
              "      <td>196.370792</td>\n",
              "      <td>-2.577077</td>\n",
              "      <td>-22.645914</td>\n",
              "      <td>93.708970</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>254.599403</td>\n",
              "      <td>9.245377</td>\n",
              "      <td>151.656239</td>\n",
              "      <td>93.377091</td>\n",
              "      <td>-31.668459</td>\n",
              "      <td>92.511416</td>\n",
              "      <td>198.598885</td>\n",
              "      <td>66.328654</td>\n",
              "      <td>232.164797</td>\n",
              "      <td>215.983485</td>\n",
              "      <td>192.334588</td>\n",
              "      <td>266.697438</td>\n",
              "      <td>147.023177</td>\n",
              "      <td>170.750747</td>\n",
              "      <td>105.240839</td>\n",
              "      <td>115.455498</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>290.040861</td>\n",
              "      <td>161.374547</td>\n",
              "      <td>70.177088</td>\n",
              "      <td>74.350879</td>\n",
              "      <td>230.188671</td>\n",
              "      <td>230.777534</td>\n",
              "      <td>251.258058</td>\n",
              "      <td>183.337692</td>\n",
              "      <td>240.107252</td>\n",
              "      <td>278.940438</td>\n",
              "      <td>183.484400</td>\n",
              "      <td>137.560854</td>\n",
              "      <td>169.524114</td>\n",
              "      <td>172.233807</td>\n",
              "      <td>0.996204</td>\n",
              "      <td>187.083308</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-45674a1f-5f4b-4b36-b5e8-5122ef12b56d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-45674a1f-5f4b-4b36-b5e8-5122ef12b56d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-45674a1f-5f4b-4b36-b5e8-5122ef12b56d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-305d7de9-91bc-4588-80aa-a4260c7a9ae5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-305d7de9-91bc-4588-80aa-a4260c7a9ae5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-305d7de9-91bc-4588-80aa-a4260c7a9ae5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 26832,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.34610858750622,\n        \"min\": -259.29488474573725,\n        \"max\": 598.4270978253097,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          97.89471422268754,\n          231.26939064240764,\n          -18.61075516571276\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.05270010882572,\n        \"min\": -287.48697447052587,\n        \"max\": 601.4967754247664,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          93.17519505868424,\n          -23.039052562500828,\n          39.680291827339786\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.41480981585875,\n        \"min\": -265.3618353166657,\n        \"max\": 561.6873446306686,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          231.70528370824425,\n          60.10161581955342,\n          152.73085311623458\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.03771224174055,\n        \"min\": -335.9407751478449,\n        \"max\": 563.464862432518,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          213.77861164278207,\n          103.4717054749489,\n          -8.233094011158713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.78263786687,\n        \"min\": -330.0345396349738,\n        \"max\": 638.0900359655966,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          107.76431601844092,\n          250.6946939447467,\n          33.11939105705976\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.04903211467249,\n        \"min\": -303.67002402538685,\n        \"max\": 574.9832535973111,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          90.21534956054624,\n          146.88854515786062,\n          -22.519978721916036\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.70673733025431,\n        \"min\": -259.9726158751545,\n        \"max\": 651.2618688940279,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          175.8909454648576,\n          146.63278652596915,\n          -81.66734199751266\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.566782160395,\n        \"min\": -272.9073408068563,\n        \"max\": 613.5505330639413,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          236.45711102568364,\n          237.8373718428207,\n          346.18189713001937\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.18745820513521,\n        \"min\": -321.39393474712165,\n        \"max\": 593.5972735302853,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          90.19682074408878,\n          201.4944165944882,\n          193.3620701371044\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.10539549125018,\n        \"min\": -315.1360150485736,\n        \"max\": 529.2744297141626,\n        \"num_unique_values\": 26832,\n        \"samples\": [\n          39.54558212502533,\n          90.51480798069268,\n          -37.878907096009954\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.27234661044433,\n        \"min\": -299.32274077733257,\n        \"max\": 579.2544670858612,\n        \"num_unique_values\": 26831,\n        \"samples\": [\n          -80.67015214879495,\n          -74.84117522230669,\n          -92.83575392361124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.27460819635952,\n        \"min\": -281.0265054167796,\n        \"max\": 544.2947244025383,\n        \"num_unique_values\": 26831,\n        \"samples\": [\n          81.66722083063681,\n          18.710632360518687,\n          122.80608073987986\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.88221726566456,\n        \"min\": -286.7470779971523,\n        \"max\": 605.7188639302491,\n        \"num_unique_values\": 26831,\n        \"samples\": [\n          44.09427299594864,\n          49.62900827544537,\n          204.21588738945852\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.17330279071643,\n        \"min\": -296.46134521531167,\n        \"max\": 583.2521076619411,\n        \"num_unique_values\": 26831,\n        \"samples\": [\n          167.42466770988355,\n          -73.63159264011075,\n          25.386287908523684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.79675662229121,\n        \"min\": -245.21529995854084,\n        \"max\": 615.1768146743362,\n        \"num_unique_values\": 26831,\n        \"samples\": [\n          141.56193290844948,\n          77.78249081453771,\n          274.34111743076375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.60381476086242,\n        \"min\": 62.134562362182656,\n        \"max\": 258.9899653680856,\n        \"num_unique_values\": 26831,\n        \"samples\": [\n          200.7242394400067,\n          97.52626380179618,\n          101.04247151234702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Low\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_A\",\n          \"Category_B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "2K1RwXoAemyj",
        "outputId": "ea49bedf-d446-482c-b451-d58d04d2ccce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 26832 entries, 0 to 26831\n",
            "Data columns (total 18 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   feature_1      26832 non-null  float64\n",
            " 1   feature_2      26832 non-null  float64\n",
            " 2   feature_3      26832 non-null  float64\n",
            " 3   feature_4      26832 non-null  float64\n",
            " 4   feature_5      26832 non-null  float64\n",
            " 5   feature_6      26832 non-null  float64\n",
            " 6   feature_7      26832 non-null  float64\n",
            " 7   feature_8      26832 non-null  float64\n",
            " 8   feature_9      26832 non-null  float64\n",
            " 9   feature_10     26832 non-null  float64\n",
            " 10  feature_11     26831 non-null  float64\n",
            " 11  feature_12     26831 non-null  float64\n",
            " 12  feature_13     26831 non-null  float64\n",
            " 13  feature_14     26831 non-null  float64\n",
            " 14  feature_15     26831 non-null  float64\n",
            " 15  target         26831 non-null  float64\n",
            " 16  cat_feature_1  26831 non-null  object \n",
            " 17  cat_feature_2  26831 non-null  object \n",
            "dtypes: float64(16), object(2)\n",
            "memory usage: 3.7+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "8hcZgLx-emyk",
        "outputId": "84860f34-7fbe-42af-9e0a-ed50460cf544",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          feature_1     feature_2     feature_3     feature_4     feature_5  \\\n",
              "count  26832.000000  26832.000000  26832.000000  26832.000000  26832.000000   \n",
              "mean     158.251552    139.860222    147.086357    126.297713    176.037120   \n",
              "std      114.346109    110.052700    112.414810    109.037712    115.782638   \n",
              "min     -259.294885   -287.486974   -265.361835   -335.940775   -330.034540   \n",
              "25%       79.107450     66.170986     70.519527     51.903040     97.312035   \n",
              "50%      157.727187    139.636388    146.879147    127.572229    177.248079   \n",
              "75%      236.459514    213.388307    223.259208    199.898476    255.009974   \n",
              "max      598.427098    601.496775    561.687345    563.464862    638.090036   \n",
              "\n",
              "          feature_6     feature_7     feature_8     feature_9    feature_10  \\\n",
              "count  26832.000000  26832.000000  26832.000000  26832.000000  26832.000000   \n",
              "mean     129.020605    178.642525    176.380731    140.244802    122.600617   \n",
              "std      109.049032    117.706737    116.566782    111.187458    109.105395   \n",
              "min     -303.670024   -259.972616   -272.907341   -321.393935   -315.136015   \n",
              "25%       54.815467     97.191300     95.910545     64.579900     48.967985   \n",
              "50%      129.461332    179.258788    175.980673    139.948119    123.772009   \n",
              "75%      203.015553    259.714993    256.205910    215.784401    197.369951   \n",
              "max      574.983254    651.261869    613.550533    593.597274    529.274430   \n",
              "\n",
              "         feature_11    feature_12    feature_13    feature_14    feature_15  \\\n",
              "count  26831.000000  26831.000000  26831.000000  26831.000000  26831.000000   \n",
              "mean     126.556194    134.710004    167.060613    144.625814    166.974636   \n",
              "std      109.272347    110.274608    115.882217    111.173303    115.796757   \n",
              "min     -299.322741   -281.026505   -286.747078   -296.461345   -245.215300   \n",
              "25%       51.773442     60.293441     88.185941     70.623541     88.042106   \n",
              "50%      127.104711    134.981179    166.319480    145.010945    167.692478   \n",
              "75%      201.349498    209.123478    246.951704    219.627938    246.124031   \n",
              "max      579.254467    544.294724    605.718864    583.252108    615.176815   \n",
              "\n",
              "             target  \n",
              "count  26831.000000  \n",
              "mean     150.134695  \n",
              "std       51.603815  \n",
              "min       62.134562  \n",
              "25%       99.880734  \n",
              "50%      162.952267  \n",
              "75%      199.931245  \n",
              "max      258.989965  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb78d49c-468e-4f0b-b1fa-6cbd859f64aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26832.000000</td>\n",
              "      <td>26831.000000</td>\n",
              "      <td>26831.000000</td>\n",
              "      <td>26831.000000</td>\n",
              "      <td>26831.000000</td>\n",
              "      <td>26831.000000</td>\n",
              "      <td>26831.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>158.251552</td>\n",
              "      <td>139.860222</td>\n",
              "      <td>147.086357</td>\n",
              "      <td>126.297713</td>\n",
              "      <td>176.037120</td>\n",
              "      <td>129.020605</td>\n",
              "      <td>178.642525</td>\n",
              "      <td>176.380731</td>\n",
              "      <td>140.244802</td>\n",
              "      <td>122.600617</td>\n",
              "      <td>126.556194</td>\n",
              "      <td>134.710004</td>\n",
              "      <td>167.060613</td>\n",
              "      <td>144.625814</td>\n",
              "      <td>166.974636</td>\n",
              "      <td>150.134695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>114.346109</td>\n",
              "      <td>110.052700</td>\n",
              "      <td>112.414810</td>\n",
              "      <td>109.037712</td>\n",
              "      <td>115.782638</td>\n",
              "      <td>109.049032</td>\n",
              "      <td>117.706737</td>\n",
              "      <td>116.566782</td>\n",
              "      <td>111.187458</td>\n",
              "      <td>109.105395</td>\n",
              "      <td>109.272347</td>\n",
              "      <td>110.274608</td>\n",
              "      <td>115.882217</td>\n",
              "      <td>111.173303</td>\n",
              "      <td>115.796757</td>\n",
              "      <td>51.603815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-259.294885</td>\n",
              "      <td>-287.486974</td>\n",
              "      <td>-265.361835</td>\n",
              "      <td>-335.940775</td>\n",
              "      <td>-330.034540</td>\n",
              "      <td>-303.670024</td>\n",
              "      <td>-259.972616</td>\n",
              "      <td>-272.907341</td>\n",
              "      <td>-321.393935</td>\n",
              "      <td>-315.136015</td>\n",
              "      <td>-299.322741</td>\n",
              "      <td>-281.026505</td>\n",
              "      <td>-286.747078</td>\n",
              "      <td>-296.461345</td>\n",
              "      <td>-245.215300</td>\n",
              "      <td>62.134562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>79.107450</td>\n",
              "      <td>66.170986</td>\n",
              "      <td>70.519527</td>\n",
              "      <td>51.903040</td>\n",
              "      <td>97.312035</td>\n",
              "      <td>54.815467</td>\n",
              "      <td>97.191300</td>\n",
              "      <td>95.910545</td>\n",
              "      <td>64.579900</td>\n",
              "      <td>48.967985</td>\n",
              "      <td>51.773442</td>\n",
              "      <td>60.293441</td>\n",
              "      <td>88.185941</td>\n",
              "      <td>70.623541</td>\n",
              "      <td>88.042106</td>\n",
              "      <td>99.880734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>157.727187</td>\n",
              "      <td>139.636388</td>\n",
              "      <td>146.879147</td>\n",
              "      <td>127.572229</td>\n",
              "      <td>177.248079</td>\n",
              "      <td>129.461332</td>\n",
              "      <td>179.258788</td>\n",
              "      <td>175.980673</td>\n",
              "      <td>139.948119</td>\n",
              "      <td>123.772009</td>\n",
              "      <td>127.104711</td>\n",
              "      <td>134.981179</td>\n",
              "      <td>166.319480</td>\n",
              "      <td>145.010945</td>\n",
              "      <td>167.692478</td>\n",
              "      <td>162.952267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>236.459514</td>\n",
              "      <td>213.388307</td>\n",
              "      <td>223.259208</td>\n",
              "      <td>199.898476</td>\n",
              "      <td>255.009974</td>\n",
              "      <td>203.015553</td>\n",
              "      <td>259.714993</td>\n",
              "      <td>256.205910</td>\n",
              "      <td>215.784401</td>\n",
              "      <td>197.369951</td>\n",
              "      <td>201.349498</td>\n",
              "      <td>209.123478</td>\n",
              "      <td>246.951704</td>\n",
              "      <td>219.627938</td>\n",
              "      <td>246.124031</td>\n",
              "      <td>199.931245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>598.427098</td>\n",
              "      <td>601.496775</td>\n",
              "      <td>561.687345</td>\n",
              "      <td>563.464862</td>\n",
              "      <td>638.090036</td>\n",
              "      <td>574.983254</td>\n",
              "      <td>651.261869</td>\n",
              "      <td>613.550533</td>\n",
              "      <td>593.597274</td>\n",
              "      <td>529.274430</td>\n",
              "      <td>579.254467</td>\n",
              "      <td>544.294724</td>\n",
              "      <td>605.718864</td>\n",
              "      <td>583.252108</td>\n",
              "      <td>615.176815</td>\n",
              "      <td>258.989965</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb78d49c-468e-4f0b-b1fa-6cbd859f64aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eb78d49c-468e-4f0b-b1fa-6cbd859f64aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eb78d49c-468e-4f0b-b1fa-6cbd859f64aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-96301528-5890-4638-bb85-acbfbd047b91\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-96301528-5890-4638-bb85-acbfbd047b91')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-96301528-5890-4638-bb85-acbfbd047b91 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9434.637638398684,\n        \"min\": -259.29488474573725,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          158.251551661662,\n          157.72718731016994,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9439.973165932837,\n        \"min\": -287.48697447052587,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          139.86022248779517,\n          139.63638830869667,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9438.899202749059,\n        \"min\": -265.3618353166657,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          147.08635733917455,\n          146.8791472990954,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9447.149554137071,\n        \"min\": -335.9407751478449,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          126.29771331443229,\n          127.5722289045001,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9433.165759826717,\n        \"min\": -330.0345396349738,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          176.03712015115556,\n          177.24807926110134,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9444.262315951497,\n        \"min\": -303.67002402538685,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          129.02060501654688,\n          129.46133241951287,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9428.010978799488,\n        \"min\": -259.9726158751545,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          178.6425254997833,\n          179.25878841491405,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9430.965973362949,\n        \"min\": -272.9073408068563,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          176.3807313301115,\n          175.9806728701945,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9442.126840769892,\n        \"min\": -321.39393474712165,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          140.24480209025188,\n          139.94811908684252,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9448.114707487019,\n        \"min\": -315.1360150485736,\n        \"max\": 26832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          122.6006169478132,\n          123.77200924863435,\n          26832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9443.9458543645,\n        \"min\": -299.32274077733257,\n        \"max\": 26831.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          126.55619403634157,\n          127.10471106194656,\n          26831.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9442.759266100675,\n        \"min\": -281.0265054167796,\n        \"max\": 26831.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          134.7100039770549,\n          134.98117940685825,\n          26831.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9433.589694476463,\n        \"min\": -286.7470779971523,\n        \"max\": 26831.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          167.06061290596307,\n          166.31948037449737,\n          26831.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9439.82164228739,\n        \"min\": -296.46134521531167,\n        \"max\": 26831.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          144.62581416031045,\n          145.0109445000976,\n          26831.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9430.7983761939,\n        \"min\": -245.21529995854084,\n        \"max\": 26831.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          166.9746356756064,\n          167.69247844057725,\n          26831.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9436.665640056843,\n        \"min\": 51.60381476086242,\n        \"max\": 26831.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          150.13469471666022,\n          162.95226693742148,\n          26831.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "dSLi2wgQemyk",
        "outputId": "41fbf4f9-427c-42ed-fe81-7b638daada28",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cat_feature_1\n",
              "Low     13522\n",
              "High    13309\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Low</th>\n",
              "      <td>13522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>High</th>\n",
              "      <td>13309</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "df[\"cat_feature_1\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"cat_feature_2\"].value_counts()"
      ],
      "metadata": {
        "id": "-74w8EBXghg9",
        "outputId": "1b42e4e3-286f-4cfd-ec79-ad490f057042",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cat_feature_2\n",
              "Category_A    12340\n",
              "Category_C    11710\n",
              "Category_B     2781\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cat_feature_2</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Category_A</th>\n",
              "      <td>12340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Category_C</th>\n",
              "      <td>11710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Category_B</th>\n",
              "      <td>2781</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "Y_JDQLMdemyk",
        "outputId": "8025821c-5800-44be-b536-1807f05463b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving figure attribute_histogram_plots\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1500 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "df.hist(bins=50, figsize=(20,15))\n",
        "save_fig(\"attribute_histogram_plots\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DJM2lwh6emyk"
      },
      "source": [
        "## Create a Test Set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J41Wq1W6emyk"
      },
      "outputs": [],
      "source": [
        "# to make this notebook's output identical at every run\n",
        "np.random.seed(42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "00KXuhssemyk"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "# For illustration only. Sklearn has train_test_split()\n",
        "def split_train_test(data, test_ratio):\n",
        "    shuffled_indices = np.random.permutation(len(data))\n",
        "    test_set_size = int(len(data) * test_ratio)\n",
        "    test_indices = shuffled_indices[:test_set_size]\n",
        "    train_indices = shuffled_indices[test_set_size:]\n",
        "    return data.iloc[train_indices], data.iloc[test_indices]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "3hzaHsK5emyk",
        "outputId": "c353cdb5-c852-434a-c1af-be1302f8529e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "21466"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "train_set, test_set = split_train_test(df, 0.2)\n",
        "len(train_set)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "uXzbK9-4emyl",
        "outputId": "e02f7797-7410-4c0b-aedc-e8d7aa1c460a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5366"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "len(test_set)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "stHmGOGIemyl",
        "outputId": "0b480f40-257d-44a9-e933-8618d7573fcb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "11435  166.169624  232.542407  156.393058  327.191059  299.707670  149.711299   \n",
              "1306   136.628150   71.740329  282.443049  172.153016  188.677411  171.358745   \n",
              "17218   34.193417  -21.314229  188.777248   -3.366726  287.075309  -40.191574   \n",
              "2182   -48.928693  -32.896836  113.270243  231.292567  109.519763  122.581200   \n",
              "2186   347.000626  384.451211  258.110039  240.999555   76.542689  185.701972   \n",
              "\n",
              "        feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "11435  342.394943  298.298613  246.172416  262.541611  216.383603  234.481706   \n",
              "1306   277.079374  234.161285  308.530421  177.737254   57.842245  332.206193   \n",
              "17218    1.674847   63.031480  256.339200  214.486549  325.704085  105.001752   \n",
              "2182    22.706645   58.727534   57.219099 -269.752419   -9.596231  195.422655   \n",
              "2186   169.321087  162.802873   65.385040   46.162885  307.559782  213.390946   \n",
              "\n",
              "       feature_13  feature_14  feature_15      target cat_feature_1  \\\n",
              "11435  193.130584  227.478231  377.868174  193.781755          High   \n",
              "1306   113.422195  175.348987   23.136551  173.913961           Low   \n",
              "17218  113.730705  139.986507   65.031367   94.727565           Low   \n",
              "2182   270.456354   -3.906976  126.334321   98.599220           Low   \n",
              "2186   262.506152  240.329250  244.641028  218.346449          High   \n",
              "\n",
              "      cat_feature_2  \n",
              "11435    Category_B  \n",
              "1306     Category_B  \n",
              "17218    Category_A  \n",
              "2182     Category_A  \n",
              "2186     Category_C  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2a0816f-6dde-44fc-9f12-cceb4260c912\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11435</th>\n",
              "      <td>166.169624</td>\n",
              "      <td>232.542407</td>\n",
              "      <td>156.393058</td>\n",
              "      <td>327.191059</td>\n",
              "      <td>299.707670</td>\n",
              "      <td>149.711299</td>\n",
              "      <td>342.394943</td>\n",
              "      <td>298.298613</td>\n",
              "      <td>246.172416</td>\n",
              "      <td>262.541611</td>\n",
              "      <td>216.383603</td>\n",
              "      <td>234.481706</td>\n",
              "      <td>193.130584</td>\n",
              "      <td>227.478231</td>\n",
              "      <td>377.868174</td>\n",
              "      <td>193.781755</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1306</th>\n",
              "      <td>136.628150</td>\n",
              "      <td>71.740329</td>\n",
              "      <td>282.443049</td>\n",
              "      <td>172.153016</td>\n",
              "      <td>188.677411</td>\n",
              "      <td>171.358745</td>\n",
              "      <td>277.079374</td>\n",
              "      <td>234.161285</td>\n",
              "      <td>308.530421</td>\n",
              "      <td>177.737254</td>\n",
              "      <td>57.842245</td>\n",
              "      <td>332.206193</td>\n",
              "      <td>113.422195</td>\n",
              "      <td>175.348987</td>\n",
              "      <td>23.136551</td>\n",
              "      <td>173.913961</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17218</th>\n",
              "      <td>34.193417</td>\n",
              "      <td>-21.314229</td>\n",
              "      <td>188.777248</td>\n",
              "      <td>-3.366726</td>\n",
              "      <td>287.075309</td>\n",
              "      <td>-40.191574</td>\n",
              "      <td>1.674847</td>\n",
              "      <td>63.031480</td>\n",
              "      <td>256.339200</td>\n",
              "      <td>214.486549</td>\n",
              "      <td>325.704085</td>\n",
              "      <td>105.001752</td>\n",
              "      <td>113.730705</td>\n",
              "      <td>139.986507</td>\n",
              "      <td>65.031367</td>\n",
              "      <td>94.727565</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2182</th>\n",
              "      <td>-48.928693</td>\n",
              "      <td>-32.896836</td>\n",
              "      <td>113.270243</td>\n",
              "      <td>231.292567</td>\n",
              "      <td>109.519763</td>\n",
              "      <td>122.581200</td>\n",
              "      <td>22.706645</td>\n",
              "      <td>58.727534</td>\n",
              "      <td>57.219099</td>\n",
              "      <td>-269.752419</td>\n",
              "      <td>-9.596231</td>\n",
              "      <td>195.422655</td>\n",
              "      <td>270.456354</td>\n",
              "      <td>-3.906976</td>\n",
              "      <td>126.334321</td>\n",
              "      <td>98.599220</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2186</th>\n",
              "      <td>347.000626</td>\n",
              "      <td>384.451211</td>\n",
              "      <td>258.110039</td>\n",
              "      <td>240.999555</td>\n",
              "      <td>76.542689</td>\n",
              "      <td>185.701972</td>\n",
              "      <td>169.321087</td>\n",
              "      <td>162.802873</td>\n",
              "      <td>65.385040</td>\n",
              "      <td>46.162885</td>\n",
              "      <td>307.559782</td>\n",
              "      <td>213.390946</td>\n",
              "      <td>262.506152</td>\n",
              "      <td>240.329250</td>\n",
              "      <td>244.641028</td>\n",
              "      <td>218.346449</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2a0816f-6dde-44fc-9f12-cceb4260c912')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a2a0816f-6dde-44fc-9f12-cceb4260c912 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a2a0816f-6dde-44fc-9f12-cceb4260c912');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-28f20aca-93e6-42d2-9d65-a229b7aa6a8c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-28f20aca-93e6-42d2-9d65-a229b7aa6a8c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-28f20aca-93e6-42d2-9d65-a229b7aa6a8c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_set",
              "summary": "{\n  \"name\": \"test_set\",\n  \"rows\": 5366,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.40709203745526,\n        \"min\": -247.6858626069315,\n        \"max\": 574.646582211158,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          308.6247852597742,\n          273.3892245860259,\n          204.62982651166595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.43342742125314,\n        \"min\": -233.904417911924,\n        \"max\": 548.4589053399309,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          97.8905897766038,\n          63.68481083713067,\n          92.56162527012724\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.48446458926517,\n        \"min\": -250.15228985952297,\n        \"max\": 543.7585346415865,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          271.25430794717704,\n          373.3569189233645,\n          204.81368660633387\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.00475090796148,\n        \"min\": -229.7587035103953,\n        \"max\": 515.5700802297681,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          106.04417084878304,\n          141.20602534363067,\n          190.79153227136572\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.21028512647632,\n        \"min\": -218.4042109594499,\n        \"max\": 554.8463405692082,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          190.3765717443694,\n          126.66444337077112,\n          72.74839116402632\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.4824017853172,\n        \"min\": -245.0626796220485,\n        \"max\": 479.70234583447257,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          326.88281288661915,\n          213.40823155444136,\n          159.0084083525566\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.80140228145488,\n        \"min\": -259.9726158751545,\n        \"max\": 550.2067673118092,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          235.5582777926754,\n          133.10753382659084,\n          230.78044379031587\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.63810846316242,\n        \"min\": -203.40490680915565,\n        \"max\": 604.5093192990972,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          344.6200245633013,\n          117.3134638484656,\n          142.8093181900579\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.28907756901366,\n        \"min\": -321.39393474712165,\n        \"max\": 583.7296112977311,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          267.1175447325709,\n          -51.10805143774866,\n          92.89983160769155\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.89313184697794,\n        \"min\": -282.1147537047217,\n        \"max\": 468.8261060122652,\n        \"num_unique_values\": 5366,\n        \"samples\": [\n          300.45208955328644,\n          57.01058699712972,\n          84.9796515496158\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.33031707267871,\n        \"min\": -274.7897690193994,\n        \"max\": 485.2073594006009,\n        \"num_unique_values\": 5365,\n        \"samples\": [\n          106.43733346688902,\n          7.313768846551767,\n          224.06238117031916\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.7006693726475,\n        \"min\": -244.46764921914277,\n        \"max\": 544.2947244025383,\n        \"num_unique_values\": 5365,\n        \"samples\": [\n          12.8030385170444,\n          154.5553701655085,\n          -45.73041307131987\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.33690889864359,\n        \"min\": -227.5970205496151,\n        \"max\": 605.7188639302491,\n        \"num_unique_values\": 5365,\n        \"samples\": [\n          335.6773743785982,\n          117.60729626039762,\n          186.46883673579603\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.39077289265163,\n        \"min\": -242.9744723354168,\n        \"max\": 536.02045263174,\n        \"num_unique_values\": 5365,\n        \"samples\": [\n          255.24216141662623,\n          253.6006758506508,\n          95.95591044434096\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.39424487277941,\n        \"min\": -214.44948405694777,\n        \"max\": 546.4141127202546,\n        \"num_unique_values\": 5365,\n        \"samples\": [\n          -27.85541138343794,\n          266.4810721359302,\n          149.78351509320905\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.38956464191302,\n        \"min\": 70.27895395844753,\n        \"max\": 252.61795793093924,\n        \"num_unique_values\": 5365,\n        \"samples\": [\n          188.7759046538867,\n          181.78052253929087,\n          105.27996098452516\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Low\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_B\",\n          \"Category_A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "test_set.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "n5MVsG6zemyl"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_set, test_set = train_test_split(df, test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "rdrP6bJcemyl",
        "outputId": "da1091ca-b7f7-42c5-ea0d-f707f178ccfd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "5647    97.894714   93.175195  231.705284  213.778612  107.764316   90.215350   \n",
              "4771   231.269391  -23.039053   60.101616  103.471705  250.694694  146.888545   \n",
              "5998   -18.610755   39.680292  152.730853   -8.233094   33.119391  -22.519979   \n",
              "19147  353.991388  224.303150  231.053965  416.983736  230.506504  234.245349   \n",
              "26218  204.959004  213.159236   28.303038  140.189928   -4.419647  -33.210162   \n",
              "\n",
              "        feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "5647   175.890945  236.457111   90.196821   39.545582  -80.670152   81.667221   \n",
              "4771   146.632787  237.837372  201.494417   90.514808  -74.841175   18.710632   \n",
              "5998   -81.667342  346.181897  193.362070  -37.878907  -92.835754  122.806081   \n",
              "19147  247.641692   76.691189  234.497782  -22.514744  182.602768  105.574278   \n",
              "26218   22.361432  142.301110  -87.044647  194.877174  -73.994029   -3.343903   \n",
              "\n",
              "       feature_13  feature_14  feature_15      target cat_feature_1  \\\n",
              "5647    44.094273  167.424668  141.561933  200.724239          High   \n",
              "4771    49.629008  -73.631593   77.782491   97.526264          High   \n",
              "5998   204.215887   25.386288  274.341117  101.042472           Low   \n",
              "19147  279.383290  310.131596  110.590823  200.776156          High   \n",
              "26218   54.288123   19.643596  244.811037   86.140498           Low   \n",
              "\n",
              "      cat_feature_2  \n",
              "5647     Category_C  \n",
              "4771     Category_A  \n",
              "5998     Category_A  \n",
              "19147    Category_C  \n",
              "26218    Category_A  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5647</th>\n",
              "      <td>97.894714</td>\n",
              "      <td>93.175195</td>\n",
              "      <td>231.705284</td>\n",
              "      <td>213.778612</td>\n",
              "      <td>107.764316</td>\n",
              "      <td>90.215350</td>\n",
              "      <td>175.890945</td>\n",
              "      <td>236.457111</td>\n",
              "      <td>90.196821</td>\n",
              "      <td>39.545582</td>\n",
              "      <td>-80.670152</td>\n",
              "      <td>81.667221</td>\n",
              "      <td>44.094273</td>\n",
              "      <td>167.424668</td>\n",
              "      <td>141.561933</td>\n",
              "      <td>200.724239</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4771</th>\n",
              "      <td>231.269391</td>\n",
              "      <td>-23.039053</td>\n",
              "      <td>60.101616</td>\n",
              "      <td>103.471705</td>\n",
              "      <td>250.694694</td>\n",
              "      <td>146.888545</td>\n",
              "      <td>146.632787</td>\n",
              "      <td>237.837372</td>\n",
              "      <td>201.494417</td>\n",
              "      <td>90.514808</td>\n",
              "      <td>-74.841175</td>\n",
              "      <td>18.710632</td>\n",
              "      <td>49.629008</td>\n",
              "      <td>-73.631593</td>\n",
              "      <td>77.782491</td>\n",
              "      <td>97.526264</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5998</th>\n",
              "      <td>-18.610755</td>\n",
              "      <td>39.680292</td>\n",
              "      <td>152.730853</td>\n",
              "      <td>-8.233094</td>\n",
              "      <td>33.119391</td>\n",
              "      <td>-22.519979</td>\n",
              "      <td>-81.667342</td>\n",
              "      <td>346.181897</td>\n",
              "      <td>193.362070</td>\n",
              "      <td>-37.878907</td>\n",
              "      <td>-92.835754</td>\n",
              "      <td>122.806081</td>\n",
              "      <td>204.215887</td>\n",
              "      <td>25.386288</td>\n",
              "      <td>274.341117</td>\n",
              "      <td>101.042472</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19147</th>\n",
              "      <td>353.991388</td>\n",
              "      <td>224.303150</td>\n",
              "      <td>231.053965</td>\n",
              "      <td>416.983736</td>\n",
              "      <td>230.506504</td>\n",
              "      <td>234.245349</td>\n",
              "      <td>247.641692</td>\n",
              "      <td>76.691189</td>\n",
              "      <td>234.497782</td>\n",
              "      <td>-22.514744</td>\n",
              "      <td>182.602768</td>\n",
              "      <td>105.574278</td>\n",
              "      <td>279.383290</td>\n",
              "      <td>310.131596</td>\n",
              "      <td>110.590823</td>\n",
              "      <td>200.776156</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26218</th>\n",
              "      <td>204.959004</td>\n",
              "      <td>213.159236</td>\n",
              "      <td>28.303038</td>\n",
              "      <td>140.189928</td>\n",
              "      <td>-4.419647</td>\n",
              "      <td>-33.210162</td>\n",
              "      <td>22.361432</td>\n",
              "      <td>142.301110</td>\n",
              "      <td>-87.044647</td>\n",
              "      <td>194.877174</td>\n",
              "      <td>-73.994029</td>\n",
              "      <td>-3.343903</td>\n",
              "      <td>54.288123</td>\n",
              "      <td>19.643596</td>\n",
              "      <td>244.811037</td>\n",
              "      <td>86.140498</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e56488c2-6e9d-417e-850d-a26e03f324ff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e56488c2-6e9d-417e-850d-a26e03f324ff')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e56488c2-6e9d-417e-850d-a26e03f324ff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_set",
              "summary": "{\n  \"name\": \"test_set\",\n  \"rows\": 5367,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113.78556584567318,\n        \"min\": -259.29488474573725,\n        \"max\": 544.7514747393913,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          -12.182616391099288,\n          473.26751356003126,\n          45.25967843685456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.61854152334054,\n        \"min\": -221.17284012899395,\n        \"max\": 531.8288152656306,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          79.9648570472715,\n          152.79414148035497,\n          113.21519729460496\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.34761130669128,\n        \"min\": -230.4198131021404,\n        \"max\": 532.0368551968519,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          313.5662273517594,\n          231.20733932217237,\n          190.58021947536892\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.66801177847476,\n        \"min\": -256.7407603504631,\n        \"max\": 510.3673717748426,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          217.8320706109186,\n          238.49837773513835,\n          -3.485623447265638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113.19223045692752,\n        \"min\": -330.0345396349738,\n        \"max\": 576.2925623597388,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          135.0264160635526,\n          151.62433137316324,\n          266.2985702297356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.70395677406741,\n        \"min\": -238.55738332139669,\n        \"max\": 547.9467396649586,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          -9.645137396001104,\n          58.94991270423472,\n          72.21908890522029\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118.5891338627259,\n        \"min\": -222.64935693585085,\n        \"max\": 620.6282835108404,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          256.99713243164393,\n          427.368592850102,\n          213.14162896139325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.90597896630979,\n        \"min\": -227.8739932049713,\n        \"max\": 585.3626043486686,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          60.49224047157142,\n          131.3104086900384,\n          264.1510227086202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.73935616223524,\n        \"min\": -258.21781030618433,\n        \"max\": 521.0371214210212,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          75.81467943373896,\n          248.6256509460586,\n          177.06766090377795\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.9976747316514,\n        \"min\": -315.1360150485736,\n        \"max\": 499.3513892381234,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          -35.634626164287766,\n          103.65040871830602,\n          37.755704594765184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.16434046822604,\n        \"min\": -299.32274077733257,\n        \"max\": 515.8246216336861,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          152.16005195936998,\n          279.6572826331239,\n          176.20391718978237\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.81421475875683,\n        \"min\": -281.0265054167796,\n        \"max\": 542.1741983019343,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          56.67605214605716,\n          139.40546578191865,\n          -9.513482116889264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.19091481257398,\n        \"min\": -233.2226983218936,\n        \"max\": 552.9553604330636,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          158.88363258588535,\n          169.80454136405373,\n          -2.10953409207886\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.07106698425632,\n        \"min\": -233.3490132714025,\n        \"max\": 572.743371208262,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          215.30353892541672,\n          84.13448832384373,\n          124.736161084362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.9616719902708,\n        \"min\": -234.8989369899677,\n        \"max\": 516.9877687686555,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          180.9391537792386,\n          287.7736292600153,\n          53.93860892990422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.488389133462206,\n        \"min\": 64.04145191077309,\n        \"max\": 252.1401105604778,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          108.29776923473138,\n          214.0142755214784,\n          115.16800644487104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Low\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_C\",\n          \"Category_A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "test_set.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dvqiNPaTemys"
      },
      "source": [
        "# Discover and Visualize the Data to Gain Insights"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "jp7LiCt0emys",
        "outputId": "59698b49-8cb9-42e4-f5d3-a1397ca061df",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "4568   216.878624  153.715083  121.712944  156.203884  226.678086   36.416714   \n",
              "14795  260.356626  136.479689  221.513729  159.451854  333.434430   85.859470   \n",
              "18775   38.761845  -77.788518  142.803749   19.119901   -9.877798  160.219325   \n",
              "741     -2.574576  178.815671   14.923806   99.694058  254.339572   52.936386   \n",
              "23391  321.102015  230.489965  321.004994   80.924732  241.023172  130.688354   \n",
              "\n",
              "        feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "4568   244.503989  199.284072  231.253751   99.851651  125.363060   68.528836   \n",
              "14795  284.073902  276.185916  -25.219190  195.024921  103.128051  -71.688081   \n",
              "18775 -217.481547  189.215515   67.271243  116.942407  -16.660264  197.184352   \n",
              "741     36.955299   25.902153  161.764618  107.752506  -64.216561  204.858647   \n",
              "23391  172.832484   99.112102   83.207438   70.950307  202.140778   85.246290   \n",
              "\n",
              "       feature_13  feature_14  feature_15      target cat_feature_1  \\\n",
              "4568   181.925078   84.966312  183.155063  107.574627           Low   \n",
              "14795  296.255722  329.649804  169.745014  231.635478           Low   \n",
              "18775  174.508934   81.061183   23.434925  105.440286           Low   \n",
              "741     15.979085  -14.600262  190.581306  104.021585           Low   \n",
              "23391  147.034567  181.819975  328.657643  197.365672          High   \n",
              "\n",
              "      cat_feature_2  \n",
              "4568     Category_A  \n",
              "14795    Category_C  \n",
              "18775    Category_A  \n",
              "741      Category_A  \n",
              "23391    Category_C  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b5c9f90-d1b4-4002-9dd1-38884fbf3dea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4568</th>\n",
              "      <td>216.878624</td>\n",
              "      <td>153.715083</td>\n",
              "      <td>121.712944</td>\n",
              "      <td>156.203884</td>\n",
              "      <td>226.678086</td>\n",
              "      <td>36.416714</td>\n",
              "      <td>244.503989</td>\n",
              "      <td>199.284072</td>\n",
              "      <td>231.253751</td>\n",
              "      <td>99.851651</td>\n",
              "      <td>125.363060</td>\n",
              "      <td>68.528836</td>\n",
              "      <td>181.925078</td>\n",
              "      <td>84.966312</td>\n",
              "      <td>183.155063</td>\n",
              "      <td>107.574627</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14795</th>\n",
              "      <td>260.356626</td>\n",
              "      <td>136.479689</td>\n",
              "      <td>221.513729</td>\n",
              "      <td>159.451854</td>\n",
              "      <td>333.434430</td>\n",
              "      <td>85.859470</td>\n",
              "      <td>284.073902</td>\n",
              "      <td>276.185916</td>\n",
              "      <td>-25.219190</td>\n",
              "      <td>195.024921</td>\n",
              "      <td>103.128051</td>\n",
              "      <td>-71.688081</td>\n",
              "      <td>296.255722</td>\n",
              "      <td>329.649804</td>\n",
              "      <td>169.745014</td>\n",
              "      <td>231.635478</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18775</th>\n",
              "      <td>38.761845</td>\n",
              "      <td>-77.788518</td>\n",
              "      <td>142.803749</td>\n",
              "      <td>19.119901</td>\n",
              "      <td>-9.877798</td>\n",
              "      <td>160.219325</td>\n",
              "      <td>-217.481547</td>\n",
              "      <td>189.215515</td>\n",
              "      <td>67.271243</td>\n",
              "      <td>116.942407</td>\n",
              "      <td>-16.660264</td>\n",
              "      <td>197.184352</td>\n",
              "      <td>174.508934</td>\n",
              "      <td>81.061183</td>\n",
              "      <td>23.434925</td>\n",
              "      <td>105.440286</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>741</th>\n",
              "      <td>-2.574576</td>\n",
              "      <td>178.815671</td>\n",
              "      <td>14.923806</td>\n",
              "      <td>99.694058</td>\n",
              "      <td>254.339572</td>\n",
              "      <td>52.936386</td>\n",
              "      <td>36.955299</td>\n",
              "      <td>25.902153</td>\n",
              "      <td>161.764618</td>\n",
              "      <td>107.752506</td>\n",
              "      <td>-64.216561</td>\n",
              "      <td>204.858647</td>\n",
              "      <td>15.979085</td>\n",
              "      <td>-14.600262</td>\n",
              "      <td>190.581306</td>\n",
              "      <td>104.021585</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23391</th>\n",
              "      <td>321.102015</td>\n",
              "      <td>230.489965</td>\n",
              "      <td>321.004994</td>\n",
              "      <td>80.924732</td>\n",
              "      <td>241.023172</td>\n",
              "      <td>130.688354</td>\n",
              "      <td>172.832484</td>\n",
              "      <td>99.112102</td>\n",
              "      <td>83.207438</td>\n",
              "      <td>70.950307</td>\n",
              "      <td>202.140778</td>\n",
              "      <td>85.246290</td>\n",
              "      <td>147.034567</td>\n",
              "      <td>181.819975</td>\n",
              "      <td>328.657643</td>\n",
              "      <td>197.365672</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b5c9f90-d1b4-4002-9dd1-38884fbf3dea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0b5c9f90-d1b4-4002-9dd1-38884fbf3dea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0b5c9f90-d1b4-4002-9dd1-38884fbf3dea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-33250638-605c-4237-adfa-daa3dcb83ca3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33250638-605c-4237-adfa-daa3dcb83ca3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-33250638-605c-4237-adfa-daa3dcb83ca3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 21465,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.4882633102299,\n        \"min\": -247.6858626069315,\n        \"max\": 598.4270978253097,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          16.198113703042353,\n          114.45668652551662,\n          45.50053762539554\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.15098977033675,\n        \"min\": -287.48697447052587,\n        \"max\": 601.4967754247664,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          144.43752536432635,\n          97.3930859443868,\n          1.156852596933149\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.68264261064458,\n        \"min\": -265.3618353166657,\n        \"max\": 561.6873446306686,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          184.59240308467884,\n          302.32389909193734,\n          301.34947314181755\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.13226314074255,\n        \"min\": -335.9407751478449,\n        \"max\": 563.464862432518,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          37.53734329933947,\n          69.21588901109651,\n          14.00468914030546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.40686310003815,\n        \"min\": -293.3190566608723,\n        \"max\": 638.0900359655966,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          29.358972558391244,\n          208.519780786638,\n          25.33827673833575\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.13686830415575,\n        \"min\": -303.67002402538685,\n        \"max\": 574.9832535973111,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          124.7661403390702,\n          65.04004048993275,\n          57.44764928174938\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.48232194130412,\n        \"min\": -259.9726158751545,\n        \"max\": 651.2618688940279,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          152.24503866389114,\n          207.6617806923196,\n          252.95245935416816\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.4842327409838,\n        \"min\": -272.9073408068563,\n        \"max\": 613.5505330639413,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          181.5000186028953,\n          380.90363342599375,\n          19.5560057607416\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.54680343530126,\n        \"min\": -321.39393474712165,\n        \"max\": 593.5972735302853,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          73.72901228298198,\n          189.67014731265124,\n          139.17494331478952\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.62957011255708,\n        \"min\": -285.1195242083564,\n        \"max\": 529.2744297141626,\n        \"num_unique_values\": 21465,\n        \"samples\": [\n          289.1652617348784,\n          309.130850771128,\n          125.83870941316222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.04950836186096,\n        \"min\": -274.7897690193994,\n        \"max\": 579.2544670858612,\n        \"num_unique_values\": 21464,\n        \"samples\": [\n          197.98906329805789,\n          100.8922259974724,\n          -42.4458203205906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.38868935633307,\n        \"min\": -249.7113662790192,\n        \"max\": 544.2947244025383,\n        \"num_unique_values\": 21464,\n        \"samples\": [\n          159.35291406074705,\n          177.76133266643745,\n          161.20110405440028\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.54207545083739,\n        \"min\": -286.7470779971523,\n        \"max\": 605.7188639302491,\n        \"num_unique_values\": 21464,\n        \"samples\": [\n          158.31714263320782,\n          151.5150296525468,\n          109.39883770214712\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.2013892028015,\n        \"min\": -296.46134521531167,\n        \"max\": 583.2521076619411,\n        \"num_unique_values\": 21464,\n        \"samples\": [\n          10.479345632079571,\n          237.6970967792933,\n          -84.69760353252572\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.00565415053407,\n        \"min\": -245.21529995854084,\n        \"max\": 615.1768146743362,\n        \"num_unique_values\": 21464,\n        \"samples\": [\n          189.75804616887143,\n          415.9230709033666,\n          245.02066988297943\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.63282904168123,\n        \"min\": 62.134562362182656,\n        \"max\": 258.9899653680856,\n        \"num_unique_values\": 21464,\n        \"samples\": [\n          226.30480894472785,\n          188.5814428960444,\n          91.71392529115528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"High\",\n          \"Low\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_A\",\n          \"Category_C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "df1 = train_set.copy()\n",
        "df1.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hDyYAlc9emyt"
      },
      "source": [
        "## Looking for Correlations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 127,
      "metadata": {
        "id": "EXhcENiZemyt",
        "outputId": "16aaabc3-3603-411c-cd77-36d02b405515",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'feature_7'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 127
        }
      ],
      "source": [
        "df_num = df.drop([\"cat_feature_1\", \"cat_feature_2\"], axis=1)\n",
        "df_cat=df[[\"cat_feature_1\", \"cat_feature_2\"]].copy\n",
        "\n",
        "corr_matrix = df_num.corr()\n",
        "a=corr_matrix.sort_values(by='target', ascending=False)\n",
        "a.index[1]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "means = df.groupby('cat_feature_2')['target'].mean().sort_values(ascending=False)\n",
        "means.index[0]\n",
        "\n"
      ],
      "metadata": {
        "id": "rZ6hyO_tqPBU",
        "outputId": "1a1e5e0b-ced4-4895-c3cc-95db188611d4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Category_C'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "std = df.groupby('cat_feature_1')['target'].std().sort_values(ascending=False)\n",
        "std_diff = std['High']-std['Low']\n",
        "std_diff\n"
      ],
      "metadata": {
        "id": "3d3xbGQUsb25",
        "outputId": "739ab049-a5f1-4462-b9f9-aadf6a79a3ab",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.23606186611475266"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min = df.groupby('cat_feature_2')['feature_8'].min()\n",
        "min['Category_C']\n"
      ],
      "metadata": {
        "id": "yCueAESgDXbV",
        "outputId": "02cb8f0d-5478-4a18-8f4b-506dda17240d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-191.367229786706"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "filtereddf = df[(df['cat_feature_2'] == 'High') & df['cat_feature_2']=='Category_A']\n",
        "filtereddf\n",
        ""
      ],
      "metadata": {
        "id": "T_eM2J02DgvH",
        "outputId": "54354129-ea86-465a-83ca-bcaff1166aa1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        }
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [feature_1, feature_2, feature_3, feature_4, feature_5, feature_6, feature_7, feature_8, feature_9, feature_10, feature_11, feature_12, feature_13, feature_14, feature_15, target, cat_feature_1, cat_feature_2]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a6dd412a-0b84-4e1d-8134-8f8dfeaea40d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6dd412a-0b84-4e1d-8134-8f8dfeaea40d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a6dd412a-0b84-4e1d-8134-8f8dfeaea40d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a6dd412a-0b84-4e1d-8134-8f8dfeaea40d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_f49e0cca-81bf-47d3-9bd7-56f8dc6e8bdc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('filtereddf')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f49e0cca-81bf-47d3-9bd7-56f8dc6e8bdc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('filtereddf');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "filtereddf",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JWoq-mRVemyt",
        "outputId": "0abbcf09-0477-452f-c934-e5ed4e069b8e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saving figure income_vs_house_value_scatterplot\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "housing.plot(kind=\"scatter\", x=\"median_income\", y=\"median_house_value\",\n",
        "             alpha=0.1)\n",
        "plt.axis([0, 16, 0, 550000])\n",
        "save_fig(\"income_vs_house_value_scatterplot\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_MqjZRfTemyt"
      },
      "source": [
        "## Experimenting with Attribute Combinations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nVCSRKxRemyt"
      },
      "outputs": [],
      "source": [
        "housing[\"rooms_per_household\"] = housing[\"total_rooms\"]/housing[\"households\"]\n",
        "housing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"]/housing[\"total_rooms\"]\n",
        "housing[\"population_per_household\"]=housing[\"population\"]/housing[\"households\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PYwXn3rGemyt",
        "outputId": "d1e79616-3039-4747-fc91-7fb0304cfac7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "median_house_value          1.000000\n",
              "median_income               0.687160\n",
              "rooms_per_household         0.146285\n",
              "total_rooms                 0.135097\n",
              "housing_median_age          0.114110\n",
              "households                  0.064506\n",
              "total_bedrooms              0.047689\n",
              "population_per_household   -0.021985\n",
              "population                 -0.026920\n",
              "longitude                  -0.047432\n",
              "latitude                   -0.142724\n",
              "bedrooms_per_room          -0.259984\n",
              "Name: median_house_value, dtype: float64"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "corr_matrix = housing.corr()\n",
        "corr_matrix[\"median_house_value\"].sort_values(ascending=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nFybIsLvemyt",
        "outputId": "376b5848-4dd7-4699-dc68-95cc9ee8e771"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "housing.plot(kind=\"scatter\", x=\"rooms_per_household\", y=\"median_house_value\",\n",
        "             alpha=0.2)\n",
        "plt.axis([0, 5, 0, 520000])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vp_DzgCoemyt",
        "outputId": "1e286737-5e43-45a8-eee2-13639abd524a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>median_house_value</th>\n",
              "      <th>rooms_per_household</th>\n",
              "      <th>bedrooms_per_room</th>\n",
              "      <th>population_per_household</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16354.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "      <td>16354.000000</td>\n",
              "      <td>16512.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-119.575834</td>\n",
              "      <td>35.639577</td>\n",
              "      <td>28.653101</td>\n",
              "      <td>2622.728319</td>\n",
              "      <td>534.973890</td>\n",
              "      <td>1419.790819</td>\n",
              "      <td>497.060380</td>\n",
              "      <td>3.875589</td>\n",
              "      <td>206990.920724</td>\n",
              "      <td>5.440341</td>\n",
              "      <td>0.212878</td>\n",
              "      <td>3.096437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.001860</td>\n",
              "      <td>2.138058</td>\n",
              "      <td>12.574726</td>\n",
              "      <td>2138.458419</td>\n",
              "      <td>412.699041</td>\n",
              "      <td>1115.686241</td>\n",
              "      <td>375.720845</td>\n",
              "      <td>1.904950</td>\n",
              "      <td>115703.014830</td>\n",
              "      <td>2.611712</td>\n",
              "      <td>0.057379</td>\n",
              "      <td>11.584826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-124.350000</td>\n",
              "      <td>32.540000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.499900</td>\n",
              "      <td>14999.000000</td>\n",
              "      <td>1.130435</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.692308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-121.800000</td>\n",
              "      <td>33.940000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>1443.000000</td>\n",
              "      <td>295.000000</td>\n",
              "      <td>784.000000</td>\n",
              "      <td>279.000000</td>\n",
              "      <td>2.566775</td>\n",
              "      <td>119800.000000</td>\n",
              "      <td>4.442040</td>\n",
              "      <td>0.175304</td>\n",
              "      <td>2.431287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-118.510000</td>\n",
              "      <td>34.260000</td>\n",
              "      <td>29.000000</td>\n",
              "      <td>2119.500000</td>\n",
              "      <td>433.000000</td>\n",
              "      <td>1164.000000</td>\n",
              "      <td>408.000000</td>\n",
              "      <td>3.540900</td>\n",
              "      <td>179500.000000</td>\n",
              "      <td>5.232284</td>\n",
              "      <td>0.203031</td>\n",
              "      <td>2.817653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>-118.010000</td>\n",
              "      <td>37.720000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>3141.000000</td>\n",
              "      <td>644.000000</td>\n",
              "      <td>1719.250000</td>\n",
              "      <td>602.000000</td>\n",
              "      <td>4.744475</td>\n",
              "      <td>263900.000000</td>\n",
              "      <td>6.056361</td>\n",
              "      <td>0.239831</td>\n",
              "      <td>3.281420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>-114.310000</td>\n",
              "      <td>41.950000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>39320.000000</td>\n",
              "      <td>6210.000000</td>\n",
              "      <td>35682.000000</td>\n",
              "      <td>5358.000000</td>\n",
              "      <td>15.000100</td>\n",
              "      <td>500001.000000</td>\n",
              "      <td>141.909091</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1243.333333</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          longitude      latitude  housing_median_age   total_rooms  \\\n",
              "count  16512.000000  16512.000000        16512.000000  16512.000000   \n",
              "mean    -119.575834     35.639577           28.653101   2622.728319   \n",
              "std        2.001860      2.138058           12.574726   2138.458419   \n",
              "min     -124.350000     32.540000            1.000000      6.000000   \n",
              "25%     -121.800000     33.940000           18.000000   1443.000000   \n",
              "50%     -118.510000     34.260000           29.000000   2119.500000   \n",
              "75%     -118.010000     37.720000           37.000000   3141.000000   \n",
              "max     -114.310000     41.950000           52.000000  39320.000000   \n",
              "\n",
              "       total_bedrooms    population    households  median_income  \\\n",
              "count    16354.000000  16512.000000  16512.000000   16512.000000   \n",
              "mean       534.973890   1419.790819    497.060380       3.875589   \n",
              "std        412.699041   1115.686241    375.720845       1.904950   \n",
              "min          2.000000      3.000000      2.000000       0.499900   \n",
              "25%        295.000000    784.000000    279.000000       2.566775   \n",
              "50%        433.000000   1164.000000    408.000000       3.540900   \n",
              "75%        644.000000   1719.250000    602.000000       4.744475   \n",
              "max       6210.000000  35682.000000   5358.000000      15.000100   \n",
              "\n",
              "       median_house_value  rooms_per_household  bedrooms_per_room  \\\n",
              "count        16512.000000         16512.000000       16354.000000   \n",
              "mean        206990.920724             5.440341           0.212878   \n",
              "std         115703.014830             2.611712           0.057379   \n",
              "min          14999.000000             1.130435           0.100000   \n",
              "25%         119800.000000             4.442040           0.175304   \n",
              "50%         179500.000000             5.232284           0.203031   \n",
              "75%         263900.000000             6.056361           0.239831   \n",
              "max         500001.000000           141.909091           1.000000   \n",
              "\n",
              "       population_per_household  \n",
              "count              16512.000000  \n",
              "mean                   3.096437  \n",
              "std                   11.584826  \n",
              "min                    0.692308  \n",
              "25%                    2.431287  \n",
              "50%                    2.817653  \n",
              "75%                    3.281420  \n",
              "max                 1243.333333  "
            ]
          },
          "execution_count": 45,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dmHhn2-gemyu"
      },
      "source": [
        "# Prepare the Data for Machine Learning Algorithms"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Xuw2IJlMemyu"
      },
      "outputs": [],
      "source": [
        "housing = strat_train_set.drop(\"median_house_value\", axis=1) # drop labels for training set\n",
        "housing_labels = strat_train_set[\"median_house_value\"].copy()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rSUceek_emyu"
      },
      "source": [
        "## Data Cleaning"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U0SbeHu5emyu"
      },
      "source": [
        "In the book 3 options are listed:\n",
        "\n",
        "```python\n",
        "housing.dropna(subset=[\"total_bedrooms\"])    # option 1\n",
        "housing.drop(\"total_bedrooms\", axis=1)       # option 2\n",
        "median = housing[\"total_bedrooms\"].median()  # option 3\n",
        "housing[\"total_bedrooms\"].fillna(median, inplace=True)\n",
        "```\n",
        "\n",
        "To demonstrate each of them, let's create a copy of the housing dataset, but keeping only the rows that contain at least one null. Then it will be easier to visualize exactly what each option does:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4ov0dDvxemyu",
        "outputId": "0ac40be3-30c7-41b5-8a66-bbada62defe6"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>ocean_proximity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4629</th>\n",
              "      <td>-118.30</td>\n",
              "      <td>34.07</td>\n",
              "      <td>18.0</td>\n",
              "      <td>3759.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3296.0</td>\n",
              "      <td>1462.0</td>\n",
              "      <td>2.2708</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6068</th>\n",
              "      <td>-117.86</td>\n",
              "      <td>34.01</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4632.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3038.0</td>\n",
              "      <td>727.0</td>\n",
              "      <td>5.1762</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17923</th>\n",
              "      <td>-121.97</td>\n",
              "      <td>37.35</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1955.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>999.0</td>\n",
              "      <td>386.0</td>\n",
              "      <td>4.6328</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13656</th>\n",
              "      <td>-117.30</td>\n",
              "      <td>34.05</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2155.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1039.0</td>\n",
              "      <td>391.0</td>\n",
              "      <td>1.6675</td>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19252</th>\n",
              "      <td>-122.79</td>\n",
              "      <td>38.48</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6837.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3468.0</td>\n",
              "      <td>1405.0</td>\n",
              "      <td>3.1662</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
              "4629     -118.30     34.07                18.0       3759.0             NaN   \n",
              "6068     -117.86     34.01                16.0       4632.0             NaN   \n",
              "17923    -121.97     37.35                30.0       1955.0             NaN   \n",
              "13656    -117.30     34.05                 6.0       2155.0             NaN   \n",
              "19252    -122.79     38.48                 7.0       6837.0             NaN   \n",
              "\n",
              "       population  households  median_income ocean_proximity  \n",
              "4629       3296.0      1462.0         2.2708       <1H OCEAN  \n",
              "6068       3038.0       727.0         5.1762       <1H OCEAN  \n",
              "17923       999.0       386.0         4.6328       <1H OCEAN  \n",
              "13656      1039.0       391.0         1.6675          INLAND  \n",
              "19252      3468.0      1405.0         3.1662       <1H OCEAN  "
            ]
          },
          "execution_count": 47,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sample_incomplete_rows = housing[housing.isnull().any(axis=1)].head()\n",
        "sample_incomplete_rows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aRbDQYsXemyu",
        "outputId": "74b0128d-9bdf-4d6a-82db-beab24230b1a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>ocean_proximity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [longitude, latitude, housing_median_age, total_rooms, total_bedrooms, population, households, median_income, ocean_proximity]\n",
              "Index: []"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sample_incomplete_rows.dropna(subset=[\"total_bedrooms\"])    # option 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "71dRMPS_emyu",
        "outputId": "dbab4819-50b1-442f-af03-e4f11c8782d4"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>ocean_proximity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4629</th>\n",
              "      <td>-118.30</td>\n",
              "      <td>34.07</td>\n",
              "      <td>18.0</td>\n",
              "      <td>3759.0</td>\n",
              "      <td>3296.0</td>\n",
              "      <td>1462.0</td>\n",
              "      <td>2.2708</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6068</th>\n",
              "      <td>-117.86</td>\n",
              "      <td>34.01</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4632.0</td>\n",
              "      <td>3038.0</td>\n",
              "      <td>727.0</td>\n",
              "      <td>5.1762</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17923</th>\n",
              "      <td>-121.97</td>\n",
              "      <td>37.35</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1955.0</td>\n",
              "      <td>999.0</td>\n",
              "      <td>386.0</td>\n",
              "      <td>4.6328</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13656</th>\n",
              "      <td>-117.30</td>\n",
              "      <td>34.05</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2155.0</td>\n",
              "      <td>1039.0</td>\n",
              "      <td>391.0</td>\n",
              "      <td>1.6675</td>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19252</th>\n",
              "      <td>-122.79</td>\n",
              "      <td>38.48</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6837.0</td>\n",
              "      <td>3468.0</td>\n",
              "      <td>1405.0</td>\n",
              "      <td>3.1662</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       longitude  latitude  housing_median_age  total_rooms  population  \\\n",
              "4629     -118.30     34.07                18.0       3759.0      3296.0   \n",
              "6068     -117.86     34.01                16.0       4632.0      3038.0   \n",
              "17923    -121.97     37.35                30.0       1955.0       999.0   \n",
              "13656    -117.30     34.05                 6.0       2155.0      1039.0   \n",
              "19252    -122.79     38.48                 7.0       6837.0      3468.0   \n",
              "\n",
              "       households  median_income ocean_proximity  \n",
              "4629       1462.0         2.2708       <1H OCEAN  \n",
              "6068        727.0         5.1762       <1H OCEAN  \n",
              "17923       386.0         4.6328       <1H OCEAN  \n",
              "13656       391.0         1.6675          INLAND  \n",
              "19252      1405.0         3.1662       <1H OCEAN  "
            ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sample_incomplete_rows.drop(\"total_bedrooms\", axis=1)       # option 2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L4SWWLJWemyu"
      },
      "outputs": [],
      "source": [
        "median = housing[\"total_bedrooms\"].median()\n",
        "sample_incomplete_rows[\"total_bedrooms\"].fillna(median, inplace=True) # option 3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cjfRWAa-emyu",
        "outputId": "8af142b8-d8dc-47a9-8f59-07ee45423fb0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>ocean_proximity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4629</th>\n",
              "      <td>-118.30</td>\n",
              "      <td>34.07</td>\n",
              "      <td>18.0</td>\n",
              "      <td>3759.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3296.0</td>\n",
              "      <td>1462.0</td>\n",
              "      <td>2.2708</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6068</th>\n",
              "      <td>-117.86</td>\n",
              "      <td>34.01</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4632.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3038.0</td>\n",
              "      <td>727.0</td>\n",
              "      <td>5.1762</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17923</th>\n",
              "      <td>-121.97</td>\n",
              "      <td>37.35</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1955.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>999.0</td>\n",
              "      <td>386.0</td>\n",
              "      <td>4.6328</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13656</th>\n",
              "      <td>-117.30</td>\n",
              "      <td>34.05</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2155.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>1039.0</td>\n",
              "      <td>391.0</td>\n",
              "      <td>1.6675</td>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19252</th>\n",
              "      <td>-122.79</td>\n",
              "      <td>38.48</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6837.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3468.0</td>\n",
              "      <td>1405.0</td>\n",
              "      <td>3.1662</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
              "4629     -118.30     34.07                18.0       3759.0           433.0   \n",
              "6068     -117.86     34.01                16.0       4632.0           433.0   \n",
              "17923    -121.97     37.35                30.0       1955.0           433.0   \n",
              "13656    -117.30     34.05                 6.0       2155.0           433.0   \n",
              "19252    -122.79     38.48                 7.0       6837.0           433.0   \n",
              "\n",
              "       population  households  median_income ocean_proximity  \n",
              "4629       3296.0      1462.0         2.2708       <1H OCEAN  \n",
              "6068       3038.0       727.0         5.1762       <1H OCEAN  \n",
              "17923       999.0       386.0         4.6328       <1H OCEAN  \n",
              "13656      1039.0       391.0         1.6675          INLAND  \n",
              "19252      3468.0      1405.0         3.1662       <1H OCEAN  "
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sample_incomplete_rows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qn4YNnZFemyu"
      },
      "outputs": [],
      "source": [
        "from sklearn.impute import SimpleImputer\n",
        "imputer = SimpleImputer(strategy=\"median\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p4o703xYemyu"
      },
      "source": [
        "Remove the text attribute because median can only be calculated on numerical attributes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S6Ua7H3Xemyu"
      },
      "outputs": [],
      "source": [
        "housing_num = housing.drop(\"ocean_proximity\", axis=1)\n",
        "# alternatively: housing_num = housing.select_dtypes(include=[np.number])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yke-bXGpemyu",
        "outputId": "5d6facad-a4e0-4bc5-8788-8d3100956e50"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "SimpleImputer(strategy='median')"
            ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "imputer.fit(housing_num)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fp0MKk4demyv",
        "outputId": "6dc56d81-52b0-45e4-91fe-cc8582e7a413"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([-118.51  ,   34.26  ,   29.    , 2119.5   ,  433.    , 1164.    ,\n",
              "        408.    ,    3.5409])"
            ]
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "imputer.statistics_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r_CH-evmemyv"
      },
      "source": [
        "Check that this is the same as manually computing the median of each attribute:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AmfJSthOemyv",
        "outputId": "4e665d60-7121-4a10-9a11-45c4308b70ab"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([-118.51  ,   34.26  ,   29.    , 2119.5   ,  433.    , 1164.    ,\n",
              "        408.    ,    3.5409])"
            ]
          },
          "execution_count": 56,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_num.median().values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HqhU44qqemyv"
      },
      "source": [
        "Transform the training set:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4crWBmYEemyv"
      },
      "outputs": [],
      "source": [
        "X = imputer.transform(housing_num)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S10hxedvemyv"
      },
      "outputs": [],
      "source": [
        "housing_tr = pd.DataFrame(X, columns=housing_num.columns,\n",
        "                          index=housing.index)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qlBnbuvTemyv",
        "outputId": "0c910a22-f7b4-4076-839e-7bd6adc5010b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4629</th>\n",
              "      <td>-118.30</td>\n",
              "      <td>34.07</td>\n",
              "      <td>18.0</td>\n",
              "      <td>3759.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3296.0</td>\n",
              "      <td>1462.0</td>\n",
              "      <td>2.2708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6068</th>\n",
              "      <td>-117.86</td>\n",
              "      <td>34.01</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4632.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3038.0</td>\n",
              "      <td>727.0</td>\n",
              "      <td>5.1762</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17923</th>\n",
              "      <td>-121.97</td>\n",
              "      <td>37.35</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1955.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>999.0</td>\n",
              "      <td>386.0</td>\n",
              "      <td>4.6328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13656</th>\n",
              "      <td>-117.30</td>\n",
              "      <td>34.05</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2155.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>1039.0</td>\n",
              "      <td>391.0</td>\n",
              "      <td>1.6675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19252</th>\n",
              "      <td>-122.79</td>\n",
              "      <td>38.48</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6837.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3468.0</td>\n",
              "      <td>1405.0</td>\n",
              "      <td>3.1662</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
              "4629     -118.30     34.07                18.0       3759.0           433.0   \n",
              "6068     -117.86     34.01                16.0       4632.0           433.0   \n",
              "17923    -121.97     37.35                30.0       1955.0           433.0   \n",
              "13656    -117.30     34.05                 6.0       2155.0           433.0   \n",
              "19252    -122.79     38.48                 7.0       6837.0           433.0   \n",
              "\n",
              "       population  households  median_income  \n",
              "4629       3296.0      1462.0         2.2708  \n",
              "6068       3038.0       727.0         5.1762  \n",
              "17923       999.0       386.0         4.6328  \n",
              "13656      1039.0       391.0         1.6675  \n",
              "19252      3468.0      1405.0         3.1662  "
            ]
          },
          "execution_count": 59,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_tr.loc[sample_incomplete_rows.index.values]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Tq7LGJsOemyv",
        "outputId": "00c37bd0-0821-41bd-a839-167c19a493fc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'median'"
            ]
          },
          "execution_count": 60,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "imputer.strategy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_mmgDZy8emyv"
      },
      "outputs": [],
      "source": [
        "housing_tr = pd.DataFrame(X, columns=housing_num.columns,\n",
        "                          index=housing_num.index)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LouznViMemyv",
        "outputId": "3e59d457-b55d-49a4-ff52-c1c43081f9c9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17606</th>\n",
              "      <td>-121.89</td>\n",
              "      <td>37.29</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1568.0</td>\n",
              "      <td>351.0</td>\n",
              "      <td>710.0</td>\n",
              "      <td>339.0</td>\n",
              "      <td>2.7042</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18632</th>\n",
              "      <td>-121.93</td>\n",
              "      <td>37.05</td>\n",
              "      <td>14.0</td>\n",
              "      <td>679.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>306.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>6.4214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14650</th>\n",
              "      <td>-117.20</td>\n",
              "      <td>32.77</td>\n",
              "      <td>31.0</td>\n",
              "      <td>1952.0</td>\n",
              "      <td>471.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>2.8621</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3230</th>\n",
              "      <td>-119.61</td>\n",
              "      <td>36.31</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1847.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>1460.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>1.8839</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3555</th>\n",
              "      <td>-118.59</td>\n",
              "      <td>34.23</td>\n",
              "      <td>17.0</td>\n",
              "      <td>6592.0</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>4459.0</td>\n",
              "      <td>1463.0</td>\n",
              "      <td>3.0347</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
              "17606    -121.89     37.29                38.0       1568.0           351.0   \n",
              "18632    -121.93     37.05                14.0        679.0           108.0   \n",
              "14650    -117.20     32.77                31.0       1952.0           471.0   \n",
              "3230     -119.61     36.31                25.0       1847.0           371.0   \n",
              "3555     -118.59     34.23                17.0       6592.0          1525.0   \n",
              "\n",
              "       population  households  median_income  \n",
              "17606       710.0       339.0         2.7042  \n",
              "18632       306.0       113.0         6.4214  \n",
              "14650       936.0       462.0         2.8621  \n",
              "3230       1460.0       353.0         1.8839  \n",
              "3555       4459.0      1463.0         3.0347  "
            ]
          },
          "execution_count": 62,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_tr.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qpLHuUIUemyv"
      },
      "source": [
        "## Handling Text and Categorical Attributes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j-609jPFemyv"
      },
      "source": [
        "Now let's preprocess the categorical input feature, `ocean_proximity`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mdfApatSemyv",
        "outputId": "133fa111-b402-480b-adce-5bc66390a62d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ocean_proximity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17606</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18632</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14650</th>\n",
              "      <td>NEAR OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3230</th>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3555</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19480</th>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8879</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13685</th>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4937</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4861</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      ocean_proximity\n",
              "17606       <1H OCEAN\n",
              "18632       <1H OCEAN\n",
              "14650      NEAR OCEAN\n",
              "3230           INLAND\n",
              "3555        <1H OCEAN\n",
              "19480          INLAND\n",
              "8879        <1H OCEAN\n",
              "13685          INLAND\n",
              "4937        <1H OCEAN\n",
              "4861        <1H OCEAN"
            ]
          },
          "execution_count": 63,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_cat = housing[[\"ocean_proximity\"]]\n",
        "housing_cat.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Rt6Ve8RRemyw",
        "outputId": "b6906c71-be13-496e-a077-2cc5f19f3553"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0.],\n",
              "       [0.],\n",
              "       [4.],\n",
              "       [1.],\n",
              "       [0.],\n",
              "       [1.],\n",
              "       [0.],\n",
              "       [1.],\n",
              "       [0.],\n",
              "       [0.]])"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.preprocessing import OrdinalEncoder\n",
        "\n",
        "ordinal_encoder = OrdinalEncoder()\n",
        "housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)\n",
        "housing_cat_encoded[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CdE2oRzAemyw",
        "outputId": "ec8100c3-8aa4-41b4-8b63-695ef4da8ed9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[array(['<1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],\n",
              "       dtype=object)]"
            ]
          },
          "execution_count": 65,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ordinal_encoder.categories_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "T0zABW4temyw",
        "outputId": "ccc900b6-e061-4fc0-abc8-93da3ef660f7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<16512x5 sparse matrix of type '<class 'numpy.float64'>'\n",
              "\twith 16512 stored elements in Compressed Sparse Row format>"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "cat_encoder = OneHotEncoder()\n",
        "housing_cat_1hot = cat_encoder.fit_transform(housing_cat)\n",
        "housing_cat_1hot"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RGb_mrm9emyw"
      },
      "source": [
        "By default, the `OneHotEncoder` class returns a sparse array, but we can convert it to a dense array if needed by calling the `toarray()` method:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZMtOM9jBemyw",
        "outputId": "671be040-5926-4cfa-82ab-77c36e33fb48"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[1., 0., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1.],\n",
              "       ...,\n",
              "       [0., 1., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 1., 0.]])"
            ]
          },
          "execution_count": 67,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_cat_1hot.toarray()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "drRvNXZvemyw"
      },
      "source": [
        "Alternatively, you can set `sparse=False` when creating the `OneHotEncoder`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qtj0Ri1uemyw",
        "outputId": "ff02267b-af5c-4ef2-b612-6669c0354ebe"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[1., 0., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1.],\n",
              "       ...,\n",
              "       [0., 1., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 1., 0.]])"
            ]
          },
          "execution_count": 68,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cat_encoder = OneHotEncoder(sparse=False)\n",
        "housing_cat_1hot = cat_encoder.fit_transform(housing_cat)\n",
        "housing_cat_1hot"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PwJkdEGtemyw",
        "outputId": "37096d9c-cd29-4ec1-cdf2-061963c770e0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[array(['<1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],\n",
              "       dtype=object)]"
            ]
          },
          "execution_count": 69,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cat_encoder.categories_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SODNNq_Demyw"
      },
      "source": [
        "## Custom Transformers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Y5XUBYmemyw"
      },
      "source": [
        "Let's create a custom transformer to add extra attributes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4MZgntFdemyw"
      },
      "outputs": [],
      "source": [
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "# column index\n",
        "rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n",
        "\n",
        "class CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, add_bedrooms_per_room=True): # no *args or **kargs\n",
        "        self.add_bedrooms_per_room = add_bedrooms_per_room\n",
        "    def fit(self, X, y=None):\n",
        "        return self  # nothing else to do\n",
        "    def transform(self, X):\n",
        "        rooms_per_household = X[:, rooms_ix] / X[:, households_ix]\n",
        "        population_per_household = X[:, population_ix] / X[:, households_ix]\n",
        "        if self.add_bedrooms_per_room:\n",
        "            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]\n",
        "            return np.c_[X, rooms_per_household, population_per_household,\n",
        "                         bedrooms_per_room]\n",
        "        else:\n",
        "            return np.c_[X, rooms_per_household, population_per_household]\n",
        "\n",
        "attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\n",
        "housing_extra_attribs = attr_adder.transform(housing.values)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d-5JZRsdemyw"
      },
      "source": [
        "Note that I hard coded the indices (3, 4, 5, 6) for concision and clarity in the book, but it would be much cleaner to get them dynamically, like this:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W0HnWtKWemyw"
      },
      "outputs": [],
      "source": [
        "col_names = \"total_rooms\", \"total_bedrooms\", \"population\", \"households\"\n",
        "rooms_ix, bedrooms_ix, population_ix, households_ix = [\n",
        "    housing.columns.get_loc(c) for c in col_names] # get the column indices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W6dirmqsemyw"
      },
      "source": [
        "Also, `housing_extra_attribs` is a NumPy array, we've lost the column names (unfortunately, that's a problem with Scikit-Learn). To recover a `DataFrame`, you could run this:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Por0erademyx",
        "outputId": "cc42583e-4abe-40ea-f1b2-20ea59671781"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>ocean_proximity</th>\n",
              "      <th>rooms_per_household</th>\n",
              "      <th>population_per_household</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17606</th>\n",
              "      <td>-121.89</td>\n",
              "      <td>37.29</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1568.0</td>\n",
              "      <td>351.0</td>\n",
              "      <td>710.0</td>\n",
              "      <td>339.0</td>\n",
              "      <td>2.7042</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "      <td>4.625369</td>\n",
              "      <td>2.094395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18632</th>\n",
              "      <td>-121.93</td>\n",
              "      <td>37.05</td>\n",
              "      <td>14.0</td>\n",
              "      <td>679.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>306.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>6.4214</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "      <td>6.00885</td>\n",
              "      <td>2.707965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14650</th>\n",
              "      <td>-117.2</td>\n",
              "      <td>32.77</td>\n",
              "      <td>31.0</td>\n",
              "      <td>1952.0</td>\n",
              "      <td>471.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>2.8621</td>\n",
              "      <td>NEAR OCEAN</td>\n",
              "      <td>4.225108</td>\n",
              "      <td>2.025974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3230</th>\n",
              "      <td>-119.61</td>\n",
              "      <td>36.31</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1847.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>1460.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>1.8839</td>\n",
              "      <td>INLAND</td>\n",
              "      <td>5.232295</td>\n",
              "      <td>4.135977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3555</th>\n",
              "      <td>-118.59</td>\n",
              "      <td>34.23</td>\n",
              "      <td>17.0</td>\n",
              "      <td>6592.0</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>4459.0</td>\n",
              "      <td>1463.0</td>\n",
              "      <td>3.0347</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "      <td>4.50581</td>\n",
              "      <td>3.047847</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      longitude latitude housing_median_age total_rooms total_bedrooms  \\\n",
              "17606   -121.89    37.29               38.0      1568.0          351.0   \n",
              "18632   -121.93    37.05               14.0       679.0          108.0   \n",
              "14650    -117.2    32.77               31.0      1952.0          471.0   \n",
              "3230    -119.61    36.31               25.0      1847.0          371.0   \n",
              "3555    -118.59    34.23               17.0      6592.0         1525.0   \n",
              "\n",
              "      population households median_income ocean_proximity rooms_per_household  \\\n",
              "17606      710.0      339.0        2.7042       <1H OCEAN            4.625369   \n",
              "18632      306.0      113.0        6.4214       <1H OCEAN             6.00885   \n",
              "14650      936.0      462.0        2.8621      NEAR OCEAN            4.225108   \n",
              "3230      1460.0      353.0        1.8839          INLAND            5.232295   \n",
              "3555      4459.0     1463.0        3.0347       <1H OCEAN             4.50581   \n",
              "\n",
              "      population_per_household  \n",
              "17606                 2.094395  \n",
              "18632                 2.707965  \n",
              "14650                 2.025974  \n",
              "3230                  4.135977  \n",
              "3555                  3.047847  "
            ]
          },
          "execution_count": 72,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_extra_attribs = pd.DataFrame(\n",
        "    housing_extra_attribs,\n",
        "    columns=list(housing.columns)+[\"rooms_per_household\", \"population_per_household\"],\n",
        "    index=housing.index)\n",
        "housing_extra_attribs.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ebE5km2Nemyx"
      },
      "source": [
        "## Transformation Pipelines"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uKg7Ii7Hemyx"
      },
      "source": [
        "Now let's build a pipeline for preprocessing the numerical attributes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xoEUQNjUemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "num_pipeline = Pipeline([\n",
        "        ('imputer', SimpleImputer(strategy=\"median\")),\n",
        "        ('attribs_adder', CombinedAttributesAdder()),\n",
        "        ('std_scaler', StandardScaler()),\n",
        "    ])\n",
        "\n",
        "housing_num_tr = num_pipeline.fit_transform(housing_num)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1BjnPOV7emyx",
        "outputId": "8ceb9a52-a306-4317-8c61-0c721bc31e20"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, ..., -0.31205452,\n",
              "        -0.08649871,  0.15531753],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , ...,  0.21768338,\n",
              "        -0.03353391, -0.83628902],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, ..., -0.46531516,\n",
              "        -0.09240499,  0.4222004 ],\n",
              "       ...,\n",
              "       [ 1.58648943, -0.72478134, -1.56295222, ...,  0.3469342 ,\n",
              "        -0.03055414, -0.52177644],\n",
              "       [ 0.78221312, -0.85106801,  0.18664186, ...,  0.02499488,\n",
              "         0.06150916, -0.30340741],\n",
              "       [-1.43579109,  0.99645926,  1.85670895, ..., -0.22852947,\n",
              "        -0.09586294,  0.10180567]])"
            ]
          },
          "execution_count": 74,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_num_tr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5d36IGVDemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "num_attribs = list(housing_num)\n",
        "cat_attribs = [\"ocean_proximity\"]\n",
        "\n",
        "full_pipeline = ColumnTransformer([\n",
        "        (\"num\", num_pipeline, num_attribs),\n",
        "        (\"cat\", OneHotEncoder(), cat_attribs),\n",
        "    ])\n",
        "\n",
        "housing_prepared = full_pipeline.fit_transform(housing)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qoQ6TZxuemyx",
        "outputId": "7ce96a55-5378-43f1-ec7a-954cd15f33e8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  1.        ],\n",
              "       ...,\n",
              "       [ 1.58648943, -0.72478134, -1.56295222, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 0.78221312, -0.85106801,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.43579109,  0.99645926,  1.85670895, ...,  0.        ,\n",
              "         1.        ,  0.        ]])"
            ]
          },
          "execution_count": 76,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hS5qqExiemyx",
        "outputId": "1e52159d-48dd-4685-a13e-212f2b500dfe"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(16512, 16)"
            ]
          },
          "execution_count": 77,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mWTu2flsemyx"
      },
      "source": [
        "For reference, here is the old solution based on a `DataFrameSelector` transformer (to just select a subset of the Pandas `DataFrame` columns), and a `FeatureUnion`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "030mD9Vtemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "# Create a class to select numerical or categorical columns\n",
        "class OldDataFrameSelector(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, attribute_names):\n",
        "        self.attribute_names = attribute_names\n",
        "    def fit(self, X, y=None):\n",
        "        return self\n",
        "    def transform(self, X):\n",
        "        return X[self.attribute_names].values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oFTk8410emyx"
      },
      "source": [
        "Now let's join all these components into a big pipeline that will preprocess both the numerical and the categorical features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OtXdsY9memyx"
      },
      "outputs": [],
      "source": [
        "num_attribs = list(housing_num)\n",
        "cat_attribs = [\"ocean_proximity\"]\n",
        "\n",
        "old_num_pipeline = Pipeline([\n",
        "        ('selector', OldDataFrameSelector(num_attribs)),\n",
        "        ('imputer', SimpleImputer(strategy=\"median\")),\n",
        "        ('attribs_adder', CombinedAttributesAdder()),\n",
        "        ('std_scaler', StandardScaler()),\n",
        "    ])\n",
        "\n",
        "old_cat_pipeline = Pipeline([\n",
        "        ('selector', OldDataFrameSelector(cat_attribs)),\n",
        "        ('cat_encoder', OneHotEncoder(sparse=False)),\n",
        "    ])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jB86uVjSemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.pipeline import FeatureUnion\n",
        "\n",
        "old_full_pipeline = FeatureUnion(transformer_list=[\n",
        "        (\"num_pipeline\", old_num_pipeline),\n",
        "        (\"cat_pipeline\", old_cat_pipeline),\n",
        "    ])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iSMc0yXdemyy",
        "outputId": "aa335ce7-f59c-4918-c85b-7d693456dfc0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  1.        ],\n",
              "       ...,\n",
              "       [ 1.58648943, -0.72478134, -1.56295222, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 0.78221312, -0.85106801,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.43579109,  0.99645926,  1.85670895, ...,  0.        ,\n",
              "         1.        ,  0.        ]])"
            ]
          },
          "execution_count": 81,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "old_housing_prepared = old_full_pipeline.fit_transform(housing)\n",
        "old_housing_prepared"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wASSRWUTemyy"
      },
      "source": [
        "The result is the same as with the `ColumnTransformer`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g-LOAexhemyy",
        "outputId": "a39307cc-17c3-4352-87d5-cda908114cba"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 82,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.allclose(housing_prepared, old_housing_prepared)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BemsUJ85emyy"
      },
      "source": [
        "# Select and Train a Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iag8m7Vaemyy"
      },
      "source": [
        "## Training and Evaluating on the Training Set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e3FMvOHLemyy",
        "outputId": "cb7bc7db-2017-4aa1-feb1-10cd19aa2ae1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "execution_count": 83,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8_j9tPEHemyy",
        "outputId": "4d3677de-9938-48a7-fb94-0a59c218d46d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Predictions: [210644.60459286 317768.80697211 210956.43331178  59218.98886849\n",
            " 189747.55849879]\n"
          ]
        }
      ],
      "source": [
        "# let's try the full preprocessing pipeline on a few training instances\n",
        "some_data = housing.iloc[:5]\n",
        "some_labels = housing_labels.iloc[:5]\n",
        "some_data_prepared = full_pipeline.transform(some_data)\n",
        "\n",
        "print(\"Predictions:\", lin_reg.predict(some_data_prepared))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VGIAAdY1emyy"
      },
      "source": [
        "Compare against the actual values:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_nWj2zXbemyy",
        "outputId": "19d86df3-238e-412d-cd64-50e907b66c25"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Labels: [286600.0, 340600.0, 196900.0, 46300.0, 254500.0]\n"
          ]
        }
      ],
      "source": [
        "print(\"Labels:\", list(some_labels))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fh07jCkSemyy",
        "outputId": "927b4164-98bd-4733-9a44-bae3587bc1d8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, -0.49323393, -0.44543821,\n",
              "        -0.63621141, -0.42069842, -0.61493744, -0.31205452, -0.08649871,\n",
              "         0.15531753,  1.        ,  0.        ,  0.        ,  0.        ,\n",
              "         0.        ],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , -0.90896655, -1.0369278 ,\n",
              "        -0.99833135, -1.02222705,  1.33645936,  0.21768338, -0.03353391,\n",
              "        -0.83628902,  1.        ,  0.        ,  0.        ,  0.        ,\n",
              "         0.        ],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, -0.31365989, -0.15334458,\n",
              "        -0.43363936, -0.0933178 , -0.5320456 , -0.46531516, -0.09240499,\n",
              "         0.4222004 ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
              "         1.        ],\n",
              "       [-0.01706767,  0.31357576, -0.29052016, -0.36276217, -0.39675594,\n",
              "         0.03604096, -0.38343559, -1.04556555, -0.07966124,  0.08973561,\n",
              "        -0.19645314,  0.        ,  1.        ,  0.        ,  0.        ,\n",
              "         0.        ],\n",
              "       [ 0.49247384, -0.65929936, -0.92673619,  1.85619316,  2.41221109,\n",
              "         2.72415407,  2.57097492, -0.44143679, -0.35783383, -0.00419445,\n",
              "         0.2699277 ,  1.        ,  0.        ,  0.        ,  0.        ,\n",
              "         0.        ]])"
            ]
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "some_data_prepared"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-cXSMgKeemyy",
        "outputId": "bb4768f0-51e8-4aab-ef8c-7e566d602913"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "68628.19819848923"
            ]
          },
          "execution_count": 87,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "housing_predictions = lin_reg.predict(housing_prepared)\n",
        "lin_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "lin_rmse = np.sqrt(lin_mse)\n",
        "lin_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FlTeGNTqemyy"
      },
      "source": [
        "**Note**: since Scikit-Learn 0.22, you can get the RMSE directly by calling the `mean_squared_error()` function with `squared=False`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QCMQutEzemyy",
        "outputId": "c86735df-760f-4bea-9b6e-5ede4d45c8d1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "49439.89599001897"
            ]
          },
          "execution_count": 88,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "lin_mae = mean_absolute_error(housing_labels, housing_predictions)\n",
        "lin_mae"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A7YbOH9temyy",
        "outputId": "4eb3f4e8-374b-46bf-a57c-165530b1e043"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(random_state=42)"
            ]
          },
          "execution_count": 89,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "tree_reg = DecisionTreeRegressor(random_state=42)\n",
        "tree_reg.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m-AIFsgTemyz",
        "outputId": "b5b400a6-b54a-49ae-92d9-cc0113f0ddbd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.0"
            ]
          },
          "execution_count": 90,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_predictions = tree_reg.predict(housing_prepared)\n",
        "tree_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "tree_rmse = np.sqrt(tree_mse)\n",
        "tree_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m4iwVjvTemyz"
      },
      "source": [
        "## Better Evaluation Using Cross-Validation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "be0k4XOUemy3"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "scores = cross_val_score(tree_reg, housing_prepared, housing_labels,\n",
        "                         scoring=\"neg_mean_squared_error\", cv=10)\n",
        "tree_rmse_scores = np.sqrt(-scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "72agZRfFemy3",
        "outputId": "c6c92ad0-6994-4481-b85e-ae95ab8137ae"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scores: [70194.33680785 66855.16363941 72432.58244769 70758.73896782\n",
            " 71115.88230639 75585.14172901 70262.86139133 70273.6325285\n",
            " 75366.87952553 71231.65726027]\n",
            "Mean: 71407.68766037929\n",
            "Standard deviation: 2439.4345041191004\n"
          ]
        }
      ],
      "source": [
        "def display_scores(scores):\n",
        "    print(\"Scores:\", scores)\n",
        "    print(\"Mean:\", scores.mean())\n",
        "    print(\"Standard deviation:\", scores.std())\n",
        "\n",
        "display_scores(tree_rmse_scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "loMPCUrvemy3",
        "outputId": "6007ef32-edc8-4ff7-e11d-0958bfb6a1c3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scores: [66782.73843989 66960.118071   70347.95244419 74739.57052552\n",
            " 68031.13388938 71193.84183426 64969.63056405 68281.61137997\n",
            " 71552.91566558 67665.10082067]\n",
            "Mean: 69052.46136345083\n",
            "Standard deviation: 2731.674001798342\n"
          ]
        }
      ],
      "source": [
        "lin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels,\n",
        "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
        "lin_rmse_scores = np.sqrt(-lin_scores)\n",
        "display_scores(lin_rmse_scores)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TNOnBFTZemy3"
      },
      "source": [
        "**Note**: we specify `n_estimators=100` to be future-proof since the default value is going to change to 100 in Scikit-Learn 0.22 (for simplicity, this is not shown in the book)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "84WN7wQuemy3",
        "outputId": "2c528998-0187-4201-e084-793b695aa21a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "RandomForestRegressor(random_state=42)"
            ]
          },
          "execution_count": 94,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "forest_reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "forest_reg.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dIG8Ml45emy3",
        "outputId": "ae16bb13-d36b-428a-a868-67d914f2edee"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "18603.515021376355"
            ]
          },
          "execution_count": 95,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_predictions = forest_reg.predict(housing_prepared)\n",
        "forest_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "forest_rmse = np.sqrt(forest_mse)\n",
        "forest_rmse"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iTnZZ_6kemy3",
        "outputId": "5d4a59be-0858-4d39-8261-5a9d00b31cdf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scores: [49519.80364233 47461.9115823  50029.02762854 52325.28068953\n",
            " 49308.39426421 53446.37892622 48634.8036574  47585.73832311\n",
            " 53490.10699751 50021.5852922 ]\n",
            "Mean: 50182.303100336096\n",
            "Standard deviation: 2097.0810550985693\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "forest_scores = cross_val_score(forest_reg, housing_prepared, housing_labels,\n",
        "                                scoring=\"neg_mean_squared_error\", cv=10)\n",
        "forest_rmse_scores = np.sqrt(-forest_scores)\n",
        "display_scores(forest_rmse_scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6oqlTjOTemy3",
        "outputId": "edd443b6-c570-4f49-e035-7e5564c3fd82"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "count       10.000000\n",
              "mean     69052.461363\n",
              "std       2879.437224\n",
              "min      64969.630564\n",
              "25%      67136.363758\n",
              "50%      68156.372635\n",
              "75%      70982.369487\n",
              "max      74739.570526\n",
              "dtype: float64"
            ]
          },
          "execution_count": 97,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scores = cross_val_score(lin_reg, housing_prepared, housing_labels, scoring=\"neg_mean_squared_error\", cv=10)\n",
        "pd.Series(np.sqrt(-scores)).describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sy2xiLLJemy4",
        "outputId": "323f4191-6914-4365-8473-94872f363ac9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "111094.6308539982"
            ]
          },
          "execution_count": 98,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.svm import SVR\n",
        "\n",
        "svm_reg = SVR(kernel=\"linear\")\n",
        "svm_reg.fit(housing_prepared, housing_labels)\n",
        "housing_predictions = svm_reg.predict(housing_prepared)\n",
        "svm_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "svm_rmse = np.sqrt(svm_mse)\n",
        "svm_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fcgEMQAiemy4"
      },
      "source": [
        "# Fine-Tune Your Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XsjX__u7emy4"
      },
      "source": [
        "## Grid Search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jXJf594Zemy4",
        "outputId": "975e2591-3097-4ce0-e99c-cbf9009a5e75"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
              "             param_grid=[{'max_features': [2, 4, 6, 8],\n",
              "                          'n_estimators': [3, 10, 30]},\n",
              "                         {'bootstrap': [False], 'max_features': [2, 3, 4],\n",
              "                          'n_estimators': [3, 10]}],\n",
              "             return_train_score=True, scoring='neg_mean_squared_error')"
            ]
          },
          "execution_count": 99,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid = [\n",
        "    # try 12 (3×4) combinations of hyperparameters\n",
        "    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n",
        "    # then try 6 (2×3) combinations with bootstrap set as False\n",
        "    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n",
        "  ]\n",
        "\n",
        "forest_reg = RandomForestRegressor(random_state=42)\n",
        "# train across 5 folds, that's a total of (12+6)*5=90 rounds of training\n",
        "grid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n",
        "                           scoring='neg_mean_squared_error',\n",
        "                           return_train_score=True)\n",
        "grid_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L5L9B3Wlemy4"
      },
      "source": [
        "The best hyperparameter combination found:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "do2tw5Zlemy4",
        "outputId": "4c6cc43b-e8cd-4f5b-cf6c-7d6dcff74940"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'max_features': 8, 'n_estimators': 30}"
            ]
          },
          "execution_count": 100,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search.best_params_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5QuB6m5wemy4",
        "outputId": "0a2b572c-47bd-45aa-fae0-72255478d638"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "RandomForestRegressor(max_features=8, n_estimators=30, random_state=42)"
            ]
          },
          "execution_count": 101,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search.best_estimator_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5zUGSppCemy4"
      },
      "source": [
        "Let's look at the score of each hyperparameter combination tested during the grid search:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7g9elSlremy4",
        "outputId": "d7a3b182-aaed-47d7-c08b-662a80f54435"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "63669.11631261028 {'max_features': 2, 'n_estimators': 3}\n",
            "55627.099719926795 {'max_features': 2, 'n_estimators': 10}\n",
            "53384.57275149205 {'max_features': 2, 'n_estimators': 30}\n",
            "60965.950449450494 {'max_features': 4, 'n_estimators': 3}\n",
            "52741.04704299915 {'max_features': 4, 'n_estimators': 10}\n",
            "50377.40461678399 {'max_features': 4, 'n_estimators': 30}\n",
            "58663.93866579625 {'max_features': 6, 'n_estimators': 3}\n",
            "52006.19873526564 {'max_features': 6, 'n_estimators': 10}\n",
            "50146.51167415009 {'max_features': 6, 'n_estimators': 30}\n",
            "57869.25276169646 {'max_features': 8, 'n_estimators': 3}\n",
            "51711.127883959234 {'max_features': 8, 'n_estimators': 10}\n",
            "49682.273345071546 {'max_features': 8, 'n_estimators': 30}\n",
            "62895.06951262424 {'bootstrap': False, 'max_features': 2, 'n_estimators': 3}\n",
            "54658.176157539405 {'bootstrap': False, 'max_features': 2, 'n_estimators': 10}\n",
            "59470.40652318466 {'bootstrap': False, 'max_features': 3, 'n_estimators': 3}\n",
            "52724.9822587892 {'bootstrap': False, 'max_features': 3, 'n_estimators': 10}\n",
            "57490.5691951261 {'bootstrap': False, 'max_features': 4, 'n_estimators': 3}\n",
            "51009.495668875716 {'bootstrap': False, 'max_features': 4, 'n_estimators': 10}\n"
          ]
        }
      ],
      "source": [
        "cvres = grid_search.cv_results_\n",
        "for mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n",
        "    print(np.sqrt(-mean_score), params)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "unM5D-ASemy4",
        "outputId": "44dca1f5-8544-4a69-865c-497e764abe14"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_fit_time</th>\n",
              "      <th>std_fit_time</th>\n",
              "      <th>mean_score_time</th>\n",
              "      <th>std_score_time</th>\n",
              "      <th>param_max_features</th>\n",
              "      <th>param_n_estimators</th>\n",
              "      <th>param_bootstrap</th>\n",
              "      <th>params</th>\n",
              "      <th>split0_test_score</th>\n",
              "      <th>split1_test_score</th>\n",
              "      <th>...</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "      <th>rank_test_score</th>\n",
              "      <th>split0_train_score</th>\n",
              "      <th>split1_train_score</th>\n",
              "      <th>split2_train_score</th>\n",
              "      <th>split3_train_score</th>\n",
              "      <th>split4_train_score</th>\n",
              "      <th>mean_train_score</th>\n",
              "      <th>std_train_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.050905</td>\n",
              "      <td>0.004097</td>\n",
              "      <td>0.002766</td>\n",
              "      <td>0.000256</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 2, 'n_estimators': 3}</td>\n",
              "      <td>-3.837622e+09</td>\n",
              "      <td>-4.147108e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-4.053756e+09</td>\n",
              "      <td>1.519591e+08</td>\n",
              "      <td>18</td>\n",
              "      <td>-1.064113e+09</td>\n",
              "      <td>-1.105142e+09</td>\n",
              "      <td>-1.116550e+09</td>\n",
              "      <td>-1.112342e+09</td>\n",
              "      <td>-1.129650e+09</td>\n",
              "      <td>-1.105559e+09</td>\n",
              "      <td>2.220402e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.143706</td>\n",
              "      <td>0.002170</td>\n",
              "      <td>0.007205</td>\n",
              "      <td>0.000304</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 2, 'n_estimators': 10}</td>\n",
              "      <td>-3.047771e+09</td>\n",
              "      <td>-3.254861e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.094374e+09</td>\n",
              "      <td>1.327062e+08</td>\n",
              "      <td>11</td>\n",
              "      <td>-5.927175e+08</td>\n",
              "      <td>-5.870952e+08</td>\n",
              "      <td>-5.776964e+08</td>\n",
              "      <td>-5.716332e+08</td>\n",
              "      <td>-5.802501e+08</td>\n",
              "      <td>-5.818785e+08</td>\n",
              "      <td>7.345821e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.410306</td>\n",
              "      <td>0.004403</td>\n",
              "      <td>0.019903</td>\n",
              "      <td>0.000964</td>\n",
              "      <td>2</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 2, 'n_estimators': 30}</td>\n",
              "      <td>-2.689185e+09</td>\n",
              "      <td>-3.021086e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.849913e+09</td>\n",
              "      <td>1.626875e+08</td>\n",
              "      <td>9</td>\n",
              "      <td>-4.381089e+08</td>\n",
              "      <td>-4.391272e+08</td>\n",
              "      <td>-4.371702e+08</td>\n",
              "      <td>-4.376955e+08</td>\n",
              "      <td>-4.452654e+08</td>\n",
              "      <td>-4.394734e+08</td>\n",
              "      <td>2.966320e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.069762</td>\n",
              "      <td>0.000987</td>\n",
              "      <td>0.002409</td>\n",
              "      <td>0.000080</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 4, 'n_estimators': 3}</td>\n",
              "      <td>-3.730181e+09</td>\n",
              "      <td>-3.786886e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.716847e+09</td>\n",
              "      <td>1.631510e+08</td>\n",
              "      <td>16</td>\n",
              "      <td>-9.865163e+08</td>\n",
              "      <td>-1.012565e+09</td>\n",
              "      <td>-9.169425e+08</td>\n",
              "      <td>-1.037400e+09</td>\n",
              "      <td>-9.707739e+08</td>\n",
              "      <td>-9.848396e+08</td>\n",
              "      <td>4.084607e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.227188</td>\n",
              "      <td>0.001444</td>\n",
              "      <td>0.006829</td>\n",
              "      <td>0.000090</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 4, 'n_estimators': 10}</td>\n",
              "      <td>-2.666283e+09</td>\n",
              "      <td>-2.784511e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.781618e+09</td>\n",
              "      <td>1.268607e+08</td>\n",
              "      <td>8</td>\n",
              "      <td>-5.097115e+08</td>\n",
              "      <td>-5.162820e+08</td>\n",
              "      <td>-4.962893e+08</td>\n",
              "      <td>-5.436192e+08</td>\n",
              "      <td>-5.160297e+08</td>\n",
              "      <td>-5.163863e+08</td>\n",
              "      <td>1.542862e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.711381</td>\n",
              "      <td>0.038618</td>\n",
              "      <td>0.020686</td>\n",
              "      <td>0.001864</td>\n",
              "      <td>4</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 4, 'n_estimators': 30}</td>\n",
              "      <td>-2.387153e+09</td>\n",
              "      <td>-2.588448e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.537883e+09</td>\n",
              "      <td>1.214614e+08</td>\n",
              "      <td>3</td>\n",
              "      <td>-3.838835e+08</td>\n",
              "      <td>-3.880268e+08</td>\n",
              "      <td>-3.790867e+08</td>\n",
              "      <td>-4.040957e+08</td>\n",
              "      <td>-3.845520e+08</td>\n",
              "      <td>-3.879289e+08</td>\n",
              "      <td>8.571233e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.094580</td>\n",
              "      <td>0.003861</td>\n",
              "      <td>0.002426</td>\n",
              "      <td>0.000118</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 6, 'n_estimators': 3}</td>\n",
              "      <td>-3.119657e+09</td>\n",
              "      <td>-3.586319e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.441458e+09</td>\n",
              "      <td>1.893056e+08</td>\n",
              "      <td>14</td>\n",
              "      <td>-9.245343e+08</td>\n",
              "      <td>-8.886939e+08</td>\n",
              "      <td>-9.353135e+08</td>\n",
              "      <td>-9.009801e+08</td>\n",
              "      <td>-8.624664e+08</td>\n",
              "      <td>-9.023976e+08</td>\n",
              "      <td>2.591445e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.311034</td>\n",
              "      <td>0.005247</td>\n",
              "      <td>0.006980</td>\n",
              "      <td>0.000283</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 6, 'n_estimators': 10}</td>\n",
              "      <td>-2.549663e+09</td>\n",
              "      <td>-2.782039e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.704645e+09</td>\n",
              "      <td>1.471569e+08</td>\n",
              "      <td>6</td>\n",
              "      <td>-4.980344e+08</td>\n",
              "      <td>-5.045869e+08</td>\n",
              "      <td>-4.994664e+08</td>\n",
              "      <td>-4.990325e+08</td>\n",
              "      <td>-5.055542e+08</td>\n",
              "      <td>-5.013349e+08</td>\n",
              "      <td>3.100456e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.979656</td>\n",
              "      <td>0.048790</td>\n",
              "      <td>0.021028</td>\n",
              "      <td>0.001812</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 6, 'n_estimators': 30}</td>\n",
              "      <td>-2.370010e+09</td>\n",
              "      <td>-2.583638e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.514673e+09</td>\n",
              "      <td>1.285080e+08</td>\n",
              "      <td>2</td>\n",
              "      <td>-3.838538e+08</td>\n",
              "      <td>-3.804711e+08</td>\n",
              "      <td>-3.805218e+08</td>\n",
              "      <td>-3.856095e+08</td>\n",
              "      <td>-3.901917e+08</td>\n",
              "      <td>-3.841296e+08</td>\n",
              "      <td>3.617057e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.118484</td>\n",
              "      <td>0.001009</td>\n",
              "      <td>0.002239</td>\n",
              "      <td>0.000068</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 8, 'n_estimators': 3}</td>\n",
              "      <td>-3.353504e+09</td>\n",
              "      <td>-3.348552e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.348850e+09</td>\n",
              "      <td>1.241939e+08</td>\n",
              "      <td>13</td>\n",
              "      <td>-9.228123e+08</td>\n",
              "      <td>-8.553031e+08</td>\n",
              "      <td>-8.603321e+08</td>\n",
              "      <td>-8.881964e+08</td>\n",
              "      <td>-9.151287e+08</td>\n",
              "      <td>-8.883545e+08</td>\n",
              "      <td>2.750227e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.401726</td>\n",
              "      <td>0.005465</td>\n",
              "      <td>0.007028</td>\n",
              "      <td>0.000345</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 8, 'n_estimators': 10}</td>\n",
              "      <td>-2.571970e+09</td>\n",
              "      <td>-2.718994e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.674041e+09</td>\n",
              "      <td>1.392777e+08</td>\n",
              "      <td>5</td>\n",
              "      <td>-4.932416e+08</td>\n",
              "      <td>-4.815238e+08</td>\n",
              "      <td>-4.730979e+08</td>\n",
              "      <td>-5.155367e+08</td>\n",
              "      <td>-4.985555e+08</td>\n",
              "      <td>-4.923911e+08</td>\n",
              "      <td>1.459294e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1.236572</td>\n",
              "      <td>0.036875</td>\n",
              "      <td>0.019325</td>\n",
              "      <td>0.000252</td>\n",
              "      <td>8</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 8, 'n_estimators': 30}</td>\n",
              "      <td>-2.357390e+09</td>\n",
              "      <td>-2.546640e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.468328e+09</td>\n",
              "      <td>1.091662e+08</td>\n",
              "      <td>1</td>\n",
              "      <td>-3.841658e+08</td>\n",
              "      <td>-3.744500e+08</td>\n",
              "      <td>-3.773239e+08</td>\n",
              "      <td>-3.882250e+08</td>\n",
              "      <td>-3.810005e+08</td>\n",
              "      <td>-3.810330e+08</td>\n",
              "      <td>4.871017e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.064666</td>\n",
              "      <td>0.001042</td>\n",
              "      <td>0.002780</td>\n",
              "      <td>0.000240</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 2, 'n_est...</td>\n",
              "      <td>-3.785816e+09</td>\n",
              "      <td>-4.166012e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.955790e+09</td>\n",
              "      <td>1.900964e+08</td>\n",
              "      <td>17</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.213941</td>\n",
              "      <td>0.000996</td>\n",
              "      <td>0.007956</td>\n",
              "      <td>0.000267</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 2, 'n_est...</td>\n",
              "      <td>-2.810721e+09</td>\n",
              "      <td>-3.107789e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.987516e+09</td>\n",
              "      <td>1.539234e+08</td>\n",
              "      <td>10</td>\n",
              "      <td>-6.056477e-02</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-2.967449e+00</td>\n",
              "      <td>-6.056027e-01</td>\n",
              "      <td>1.181156e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.090480</td>\n",
              "      <td>0.003167</td>\n",
              "      <td>0.002681</td>\n",
              "      <td>0.000082</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 3, 'n_est...</td>\n",
              "      <td>-3.618324e+09</td>\n",
              "      <td>-3.441527e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.536729e+09</td>\n",
              "      <td>7.795057e+07</td>\n",
              "      <td>15</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-6.072840e+01</td>\n",
              "      <td>-1.214568e+01</td>\n",
              "      <td>2.429136e+01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.286396</td>\n",
              "      <td>0.004578</td>\n",
              "      <td>0.008019</td>\n",
              "      <td>0.000384</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 3, 'n_est...</td>\n",
              "      <td>-2.757999e+09</td>\n",
              "      <td>-2.851737e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.779924e+09</td>\n",
              "      <td>6.286720e+07</td>\n",
              "      <td>7</td>\n",
              "      <td>-2.089484e+01</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-5.465556e+00</td>\n",
              "      <td>-5.272080e+00</td>\n",
              "      <td>8.093117e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0.109239</td>\n",
              "      <td>0.002999</td>\n",
              "      <td>0.003399</td>\n",
              "      <td>0.001579</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 4, 'n_est...</td>\n",
              "      <td>-3.134040e+09</td>\n",
              "      <td>-3.559375e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.305166e+09</td>\n",
              "      <td>1.879165e+08</td>\n",
              "      <td>12</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.370459</td>\n",
              "      <td>0.017424</td>\n",
              "      <td>0.007863</td>\n",
              "      <td>0.000056</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 4, 'n_est...</td>\n",
              "      <td>-2.525578e+09</td>\n",
              "      <td>-2.710011e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.601969e+09</td>\n",
              "      <td>1.088048e+08</td>\n",
              "      <td>4</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-1.514119e-02</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-3.028238e-03</td>\n",
              "      <td>6.056477e-03</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>18 rows × 23 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
              "0        0.050905      0.004097         0.002766        0.000256   \n",
              "1        0.143706      0.002170         0.007205        0.000304   \n",
              "2        0.410306      0.004403         0.019903        0.000964   \n",
              "3        0.069762      0.000987         0.002409        0.000080   \n",
              "4        0.227188      0.001444         0.006829        0.000090   \n",
              "5        0.711381      0.038618         0.020686        0.001864   \n",
              "6        0.094580      0.003861         0.002426        0.000118   \n",
              "7        0.311034      0.005247         0.006980        0.000283   \n",
              "8        0.979656      0.048790         0.021028        0.001812   \n",
              "9        0.118484      0.001009         0.002239        0.000068   \n",
              "10       0.401726      0.005465         0.007028        0.000345   \n",
              "11       1.236572      0.036875         0.019325        0.000252   \n",
              "12       0.064666      0.001042         0.002780        0.000240   \n",
              "13       0.213941      0.000996         0.007956        0.000267   \n",
              "14       0.090480      0.003167         0.002681        0.000082   \n",
              "15       0.286396      0.004578         0.008019        0.000384   \n",
              "16       0.109239      0.002999         0.003399        0.001579   \n",
              "17       0.370459      0.017424         0.007863        0.000056   \n",
              "\n",
              "   param_max_features param_n_estimators param_bootstrap  \\\n",
              "0                   2                  3             NaN   \n",
              "1                   2                 10             NaN   \n",
              "2                   2                 30             NaN   \n",
              "3                   4                  3             NaN   \n",
              "4                   4                 10             NaN   \n",
              "5                   4                 30             NaN   \n",
              "6                   6                  3             NaN   \n",
              "7                   6                 10             NaN   \n",
              "8                   6                 30             NaN   \n",
              "9                   8                  3             NaN   \n",
              "10                  8                 10             NaN   \n",
              "11                  8                 30             NaN   \n",
              "12                  2                  3           False   \n",
              "13                  2                 10           False   \n",
              "14                  3                  3           False   \n",
              "15                  3                 10           False   \n",
              "16                  4                  3           False   \n",
              "17                  4                 10           False   \n",
              "\n",
              "                                               params  split0_test_score  \\\n",
              "0              {'max_features': 2, 'n_estimators': 3}      -3.837622e+09   \n",
              "1             {'max_features': 2, 'n_estimators': 10}      -3.047771e+09   \n",
              "2             {'max_features': 2, 'n_estimators': 30}      -2.689185e+09   \n",
              "3              {'max_features': 4, 'n_estimators': 3}      -3.730181e+09   \n",
              "4             {'max_features': 4, 'n_estimators': 10}      -2.666283e+09   \n",
              "5             {'max_features': 4, 'n_estimators': 30}      -2.387153e+09   \n",
              "6              {'max_features': 6, 'n_estimators': 3}      -3.119657e+09   \n",
              "7             {'max_features': 6, 'n_estimators': 10}      -2.549663e+09   \n",
              "8             {'max_features': 6, 'n_estimators': 30}      -2.370010e+09   \n",
              "9              {'max_features': 8, 'n_estimators': 3}      -3.353504e+09   \n",
              "10            {'max_features': 8, 'n_estimators': 10}      -2.571970e+09   \n",
              "11            {'max_features': 8, 'n_estimators': 30}      -2.357390e+09   \n",
              "12  {'bootstrap': False, 'max_features': 2, 'n_est...      -3.785816e+09   \n",
              "13  {'bootstrap': False, 'max_features': 2, 'n_est...      -2.810721e+09   \n",
              "14  {'bootstrap': False, 'max_features': 3, 'n_est...      -3.618324e+09   \n",
              "15  {'bootstrap': False, 'max_features': 3, 'n_est...      -2.757999e+09   \n",
              "16  {'bootstrap': False, 'max_features': 4, 'n_est...      -3.134040e+09   \n",
              "17  {'bootstrap': False, 'max_features': 4, 'n_est...      -2.525578e+09   \n",
              "\n",
              "    split1_test_score  ...  mean_test_score  std_test_score  rank_test_score  \\\n",
              "0       -4.147108e+09  ...    -4.053756e+09    1.519591e+08               18   \n",
              "1       -3.254861e+09  ...    -3.094374e+09    1.327062e+08               11   \n",
              "2       -3.021086e+09  ...    -2.849913e+09    1.626875e+08                9   \n",
              "3       -3.786886e+09  ...    -3.716847e+09    1.631510e+08               16   \n",
              "4       -2.784511e+09  ...    -2.781618e+09    1.268607e+08                8   \n",
              "5       -2.588448e+09  ...    -2.537883e+09    1.214614e+08                3   \n",
              "6       -3.586319e+09  ...    -3.441458e+09    1.893056e+08               14   \n",
              "7       -2.782039e+09  ...    -2.704645e+09    1.471569e+08                6   \n",
              "8       -2.583638e+09  ...    -2.514673e+09    1.285080e+08                2   \n",
              "9       -3.348552e+09  ...    -3.348850e+09    1.241939e+08               13   \n",
              "10      -2.718994e+09  ...    -2.674041e+09    1.392777e+08                5   \n",
              "11      -2.546640e+09  ...    -2.468328e+09    1.091662e+08                1   \n",
              "12      -4.166012e+09  ...    -3.955790e+09    1.900964e+08               17   \n",
              "13      -3.107789e+09  ...    -2.987516e+09    1.539234e+08               10   \n",
              "14      -3.441527e+09  ...    -3.536729e+09    7.795057e+07               15   \n",
              "15      -2.851737e+09  ...    -2.779924e+09    6.286720e+07                7   \n",
              "16      -3.559375e+09  ...    -3.305166e+09    1.879165e+08               12   \n",
              "17      -2.710011e+09  ...    -2.601969e+09    1.088048e+08                4   \n",
              "\n",
              "    split0_train_score  split1_train_score  split2_train_score  \\\n",
              "0        -1.064113e+09       -1.105142e+09       -1.116550e+09   \n",
              "1        -5.927175e+08       -5.870952e+08       -5.776964e+08   \n",
              "2        -4.381089e+08       -4.391272e+08       -4.371702e+08   \n",
              "3        -9.865163e+08       -1.012565e+09       -9.169425e+08   \n",
              "4        -5.097115e+08       -5.162820e+08       -4.962893e+08   \n",
              "5        -3.838835e+08       -3.880268e+08       -3.790867e+08   \n",
              "6        -9.245343e+08       -8.886939e+08       -9.353135e+08   \n",
              "7        -4.980344e+08       -5.045869e+08       -4.994664e+08   \n",
              "8        -3.838538e+08       -3.804711e+08       -3.805218e+08   \n",
              "9        -9.228123e+08       -8.553031e+08       -8.603321e+08   \n",
              "10       -4.932416e+08       -4.815238e+08       -4.730979e+08   \n",
              "11       -3.841658e+08       -3.744500e+08       -3.773239e+08   \n",
              "12       -0.000000e+00       -0.000000e+00       -0.000000e+00   \n",
              "13       -6.056477e-02       -0.000000e+00       -0.000000e+00   \n",
              "14       -0.000000e+00       -0.000000e+00       -0.000000e+00   \n",
              "15       -2.089484e+01       -0.000000e+00       -0.000000e+00   \n",
              "16       -0.000000e+00       -0.000000e+00       -0.000000e+00   \n",
              "17       -0.000000e+00       -1.514119e-02       -0.000000e+00   \n",
              "\n",
              "    split3_train_score  split4_train_score  mean_train_score  std_train_score  \n",
              "0        -1.112342e+09       -1.129650e+09     -1.105559e+09     2.220402e+07  \n",
              "1        -5.716332e+08       -5.802501e+08     -5.818785e+08     7.345821e+06  \n",
              "2        -4.376955e+08       -4.452654e+08     -4.394734e+08     2.966320e+06  \n",
              "3        -1.037400e+09       -9.707739e+08     -9.848396e+08     4.084607e+07  \n",
              "4        -5.436192e+08       -5.160297e+08     -5.163863e+08     1.542862e+07  \n",
              "5        -4.040957e+08       -3.845520e+08     -3.879289e+08     8.571233e+06  \n",
              "6        -9.009801e+08       -8.624664e+08     -9.023976e+08     2.591445e+07  \n",
              "7        -4.990325e+08       -5.055542e+08     -5.013349e+08     3.100456e+06  \n",
              "8        -3.856095e+08       -3.901917e+08     -3.841296e+08     3.617057e+06  \n",
              "9        -8.881964e+08       -9.151287e+08     -8.883545e+08     2.750227e+07  \n",
              "10       -5.155367e+08       -4.985555e+08     -4.923911e+08     1.459294e+07  \n",
              "11       -3.882250e+08       -3.810005e+08     -3.810330e+08     4.871017e+06  \n",
              "12       -0.000000e+00       -0.000000e+00      0.000000e+00     0.000000e+00  \n",
              "13       -0.000000e+00       -2.967449e+00     -6.056027e-01     1.181156e+00  \n",
              "14       -0.000000e+00       -6.072840e+01     -1.214568e+01     2.429136e+01  \n",
              "15       -0.000000e+00       -5.465556e+00     -5.272080e+00     8.093117e+00  \n",
              "16       -0.000000e+00       -0.000000e+00      0.000000e+00     0.000000e+00  \n",
              "17       -0.000000e+00       -0.000000e+00     -3.028238e-03     6.056477e-03  \n",
              "\n",
              "[18 rows x 23 columns]"
            ]
          },
          "execution_count": 103,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(grid_search.cv_results_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8g3LELTBemy4"
      },
      "source": [
        "## Randomized Search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H3qMebwCemy4",
        "outputId": "51ec23d4-fc00-4bd7-cac4-8439238617bf"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
              "                   param_distributions={'max_features': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fd1b96682d0>,\n",
              "                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fd1b9668b10>},\n",
              "                   random_state=42, scoring='neg_mean_squared_error')"
            ]
          },
          "execution_count": 104,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from scipy.stats import randint\n",
        "\n",
        "param_distribs = {\n",
        "        'n_estimators': randint(low=1, high=200),\n",
        "        'max_features': randint(low=1, high=8),\n",
        "    }\n",
        "\n",
        "forest_reg = RandomForestRegressor(random_state=42)\n",
        "rnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distribs,\n",
        "                                n_iter=10, cv=5, scoring='neg_mean_squared_error', random_state=42)\n",
        "rnd_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UqhiA72semy4",
        "outputId": "87072b06-0f3b-4c24-acad-d2496c61d924"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "49150.70756927707 {'max_features': 7, 'n_estimators': 180}\n",
            "51389.889203389284 {'max_features': 5, 'n_estimators': 15}\n",
            "50796.155224308866 {'max_features': 3, 'n_estimators': 72}\n",
            "50835.13360315349 {'max_features': 5, 'n_estimators': 21}\n",
            "49280.9449827171 {'max_features': 7, 'n_estimators': 122}\n",
            "50774.90662363929 {'max_features': 3, 'n_estimators': 75}\n",
            "50682.78888164288 {'max_features': 3, 'n_estimators': 88}\n",
            "49608.99608105296 {'max_features': 5, 'n_estimators': 100}\n",
            "50473.61930350219 {'max_features': 3, 'n_estimators': 150}\n",
            "64429.84143294435 {'max_features': 5, 'n_estimators': 2}\n"
          ]
        }
      ],
      "source": [
        "cvres = rnd_search.cv_results_\n",
        "for mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n",
        "    print(np.sqrt(-mean_score), params)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wz6E0bqpemy4"
      },
      "source": [
        "## Analyze the Best Models and Their Errors"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mv_JLrP6emy4",
        "outputId": "3e941b43-ebcd-496c-94a0-b7d4f47d4265"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([7.33442355e-02, 6.29090705e-02, 4.11437985e-02, 1.46726854e-02,\n",
              "       1.41064835e-02, 1.48742809e-02, 1.42575993e-02, 3.66158981e-01,\n",
              "       5.64191792e-02, 1.08792957e-01, 5.33510773e-02, 1.03114883e-02,\n",
              "       1.64780994e-01, 6.02803867e-05, 1.96041560e-03, 2.85647464e-03])"
            ]
          },
          "execution_count": 106,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "feature_importances = grid_search.best_estimator_.feature_importances_\n",
        "feature_importances"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IKBXBIp0emy4",
        "outputId": "79d44e40-8785-4b49-8d34-2a658f657850"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[(0.36615898061813423, 'median_income'),\n",
              " (0.16478099356159054, 'INLAND'),\n",
              " (0.10879295677551575, 'pop_per_hhold'),\n",
              " (0.07334423551601243, 'longitude'),\n",
              " (0.06290907048262032, 'latitude'),\n",
              " (0.056419179181954014, 'rooms_per_hhold'),\n",
              " (0.053351077347675815, 'bedrooms_per_room'),\n",
              " (0.04114379847872964, 'housing_median_age'),\n",
              " (0.014874280890402769, 'population'),\n",
              " (0.014672685420543239, 'total_rooms'),\n",
              " (0.014257599323407808, 'households'),\n",
              " (0.014106483453584104, 'total_bedrooms'),\n",
              " (0.010311488326303788, '<1H OCEAN'),\n",
              " (0.0028564746373201584, 'NEAR OCEAN'),\n",
              " (0.0019604155994780706, 'NEAR BAY'),\n",
              " (6.0280386727366e-05, 'ISLAND')]"
            ]
          },
          "execution_count": 107,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "extra_attribs = [\"rooms_per_hhold\", \"pop_per_hhold\", \"bedrooms_per_room\"]\n",
        "#cat_encoder = cat_pipeline.named_steps[\"cat_encoder\"] # old solution\n",
        "cat_encoder = full_pipeline.named_transformers_[\"cat\"]\n",
        "cat_one_hot_attribs = list(cat_encoder.categories_[0])\n",
        "attributes = num_attribs + extra_attribs + cat_one_hot_attribs\n",
        "sorted(zip(feature_importances, attributes), reverse=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fCtLXfBiemy5"
      },
      "source": [
        "## Evaluate Your System on the Test Set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XUTYQh-Kemy5"
      },
      "outputs": [],
      "source": [
        "final_model = grid_search.best_estimator_\n",
        "\n",
        "X_test = strat_test_set.drop(\"median_house_value\", axis=1)\n",
        "y_test = strat_test_set[\"median_house_value\"].copy()\n",
        "\n",
        "X_test_prepared = full_pipeline.transform(X_test)\n",
        "final_predictions = final_model.predict(X_test_prepared)\n",
        "\n",
        "final_mse = mean_squared_error(y_test, final_predictions)\n",
        "final_rmse = np.sqrt(final_mse)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p6fvcQIzemy5",
        "outputId": "431e7fc8-efe2-4474-e9eb-8558bce7ec7a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "47730.22690385927"
            ]
          },
          "execution_count": 109,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "final_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m9ExTEHIemy5"
      },
      "source": [
        "We can compute a 95% confidence interval for the test RMSE:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QPoNtC5vemy5",
        "outputId": "04b98bfb-0ee1-45ab-e29f-8e840af4ae59"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([45685.10470776, 49691.25001878])"
            ]
          },
          "execution_count": 110,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from scipy import stats\n",
        "\n",
        "confidence = 0.95\n",
        "squared_errors = (final_predictions - y_test) ** 2\n",
        "np.sqrt(stats.t.interval(confidence, len(squared_errors) - 1,\n",
        "                         loc=squared_errors.mean(),\n",
        "                         scale=stats.sem(squared_errors)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fVO5tWBYemy5"
      },
      "source": [
        "We could compute the interval manually like this:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wxWZ6dCdemy5",
        "outputId": "9bb1d6cb-0c39-4e89-a4c8-37e419595b81"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(45685.10470776014, 49691.25001877871)"
            ]
          },
          "execution_count": 111,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "m = len(squared_errors)\n",
        "mean = squared_errors.mean()\n",
        "tscore = stats.t.ppf((1 + confidence) / 2, df=m - 1)\n",
        "tmargin = tscore * squared_errors.std(ddof=1) / np.sqrt(m)\n",
        "np.sqrt(mean - tmargin), np.sqrt(mean + tmargin)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wiLggxxIemy5"
      },
      "source": [
        "Alternatively, we could use a z-scores rather than t-scores:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jHRxpQxgemy5",
        "outputId": "063da5d7-9b4d-4a08-f401-36352745801f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(45685.717918136594, 49690.68623889426)"
            ]
          },
          "execution_count": 112,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "zscore = stats.norm.ppf((1 + confidence) / 2)\n",
        "zmargin = zscore * squared_errors.std(ddof=1) / np.sqrt(m)\n",
        "np.sqrt(mean - zmargin), np.sqrt(mean + zmargin)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YChczyDSemy5"
      },
      "source": [
        "# Extra material"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6kEMYGSGemy5"
      },
      "source": [
        "## A full pipeline with both preparation and prediction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eRmxmxz8emy5",
        "outputId": "da2f5f82-d8bb-4a30-ac4e-a9709e20f5ba"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([210644.60459286, 317768.80697211, 210956.43331178,  59218.98886849,\n",
              "       189747.55849879])"
            ]
          },
          "execution_count": 113,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "full_pipeline_with_predictor = Pipeline([\n",
        "        (\"preparation\", full_pipeline),\n",
        "        (\"linear\", LinearRegression())\n",
        "    ])\n",
        "\n",
        "full_pipeline_with_predictor.fit(housing, housing_labels)\n",
        "full_pipeline_with_predictor.predict(some_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K5TCowqBemy5"
      },
      "source": [
        "## Model persistence using joblib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m8DDHdplemy5"
      },
      "outputs": [],
      "source": [
        "my_model = full_pipeline_with_predictor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BTTap8gDemy5"
      },
      "outputs": [],
      "source": [
        "import joblib\n",
        "joblib.dump(my_model, \"my_model.pkl\") # DIFF\n",
        "#...\n",
        "my_model_loaded = joblib.load(\"my_model.pkl\") # DIFF"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cklH7Cn6emy5"
      },
      "source": [
        "## Example SciPy distributions for `RandomizedSearchCV`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zZI8-4FMemy5",
        "outputId": "45d113f7-d3c6-4236-c0e5-7d9c161571f0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD7CAYAAABnoJM0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAASuElEQVR4nO3df4xd5X3n8fcnOKq72NMG7KJCd5mahLoCYUq8aqUqAQm6URrSAsMf7i/BSpVRu6y2gixlRcBuklUhkrdbLbTBCg2hpIiAoT9Cf6i0tNq2WtRJ+bXWumghhkCDOrB06p+kTb/7xz0TXS4ezx3PnbkZP++XdMW9z/c89z6PZO7nnvOccyZVhSSpXe8a9wAkSeNlEEhS4wwCSWqcQSBJjTMIJKlxa8Y9gBOxYcOGmpycHPcwJGlV+fKXv/x6VW0cbF+VQTA5Ocn09PS4hyFJq0qSl47V7qEhSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklq3FBXFif5M+CHgH/uml6tqu/rapcCdwH/BngSuLaqXupqAW4Hfrbrdw/wi9X9NZwkk8DngB8EXgaur6rHlzyr45i8+bFjtu+//SPL+bGS9C1rMXsE11fVuu4xFwIbgEeAW4HTgGngwb4+24ErgC3ABcDlwHV99QeAp4DTgVuAh5O84z4YkqTls9RDQ1cBe6vqoao6CuwEtiTZ3NWvAXZV1StV9SqwC7gWIMm5wEXAjqo6UlV7gOeAqSWOSZK0CIsJgl9O8nqSv0xySdd2HvDM3AZVdQh4oWt/R7173l97saoOzFN/myTbk0wnmZ6ZmVnEsCVJxzNsEPwisAk4C9gN/F6Sc4B1wOzAtrPA+u75YH0WWNetHSzU922qandVba2qrRs3evRIkkZlqCCoqier6kBVvVVVnwf+EvhR4CAwMbD5BDD3K3+wPgEc7BaLF+orSVoBJ7pGUECAvfQWggFIcipwTtfOYL173l/blGT9PHVJ0gpYMAiSfGeSDyVZm2RNkp8CPgj8EfAocH6SqSRrgduAZ6tqX9f9PuCGJGclORO4EbgXoKqeB54GdnTvfSW9M4v2jHaKkqTjGeY6gncDnwI2A98A9gFXVNXfAiSZAu4E7qd3HcG2vr5301tbeK57/dmubc42esHwJr3rCK6uKleCJWkFLRgE3Rfzvz1O/XF6IXGsWgE3dY9j1fcDlwwxTknSMvEWE5LUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxiwqCJO9LcjTJ/X1tlybZl+RwkieSnN1XS5I7krzRPT6dJH31ya7P4e49LhvNtCRJw1rsHsFdwF/PvUiyAXgEuBU4DZgGHuzbfjtwBbAFuAC4HLiur/4A8BRwOnAL8HCSjYsckyRpCYYOgiTbgH8A/qSv+Spgb1U9VFVHgZ3AliSbu/o1wK6qeqWqXgV2Add273cucBGwo6qOVNUe4DlgakkzkiQtylBBkGQC+ARw40DpPOCZuRdVdQh4oWt/R7173l97saoOzFOXJK2AYfcIPgncU1VfHWhfB8wOtM0C6+epzwLrunWChfq+TZLtSaaTTM/MzAw5bEnSQhYMgiQXApcBv3KM8kFgYqBtAjgwT30COFhVNUTft6mq3VW1taq2btzoMoIkjcowewSXAJPAy0leAz4GTCX5G2AvvYVgAJKcCpzTtTNY75731zYlWT9PXZK0AoYJgt30vtwv7B6fAR4DPgQ8CpyfZCrJWuA24Nmq2tf1vQ+4IclZSc6kt8ZwL0BVPQ88DexIsjbJlfTOLNozkplJkoayZqENquowcHjudZKDwNGqmuleTwF3AvcDTwLb+rrfDWyidzYQwGe7tjnb6AXDm8DLwNVz7ytJWhkLBsGgqto58PpxYPM82xZwU/c4Vn0/vUNPkqQx8RYTktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1bqggSHJ/kq8l+cckzyf52b7apUn2JTmc5IkkZ/fVkuSOJG90j08nSV99sutzuHuPy0Y7PUnSQobdI/hlYLKqJoAfAz6V5P1JNgCPALcCpwHTwIN9/bYDVwBbgAuAy4Hr+uoPAE8BpwO3AA8n2XjCs5EkLdpQQVBVe6vqrbmX3eMc4Cpgb1U9VFVHgZ3AliSbu22vAXZV1StV9SqwC7gWIMm5wEXAjqo6UlV7gOeAqZHMTJI0lKHXCJL8WpLDwD7ga8DvA+cBz8xtU1WHgBe6dgbr3fP+2otVdWCe+uDnb08ynWR6ZmZm2GFLkhYwdBBU1c8D64EP0Dsc9BawDpgd2HS2245j1GeBdd06wUJ9Bz9/d1VtraqtGzd69EiSRmVRZw1V1Teq6i+A7wF+DjgITAxsNgHM/cofrE8AB6uqhugrSVoBJ3r66Bp6awR76S0EA5Dk1L52Buvd8/7apiTr56lLklbAgkGQ5LuSbEuyLskpST4E/ATwp8CjwPlJppKsBW4Dnq2qfV33+4AbkpyV5EzgRuBegKp6Hnga2JFkbZIr6Z1ZtGe0U5QkHc+aIbYpeoeBPkMvOF4CfqGqfgcgyRRwJ3A/8CSwra/v3cAmemcDAXy2a5uzjV4wvAm8DFxdVa4ES9IKWjAIui/mi49TfxzYPE+tgJu6x7Hq+4FLhhinJGmZeIsJSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxg1zG2otwuTNjx2zff/tH1nhkUjScNwjkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYtGARJvi3JPUleSnIgyVNJPtxXvzTJviSHkzyR5Oy+WpLckeSN7vHpJOmrT3Z9DnfvcdnopyhJOp5h9gjWAF8FLga+A7gV+GL3Jb4BeKRrOw2YBh7s67sduALYAlwAXA5c11d/AHgKOB24BXg4ycYlzEeStEgLBkFVHaqqnVW1v6r+paq+BHwFeD9wFbC3qh6qqqPATmBLks1d92uAXVX1SlW9CuwCrgVIci5wEbCjqo5U1R7gOWBqtFOUJB3PotcIkpwBnAvsBc4DnpmrVdUh4IWuncF697y/9mJVHZinPvi525NMJ5memZlZ7LAlSfNYVBAkeTfwBeDzVbUPWAfMDmw2C6zvng/WZ4F13TrBQn3fpqp2V9XWqtq6caNHjyRpVIYOgiTvAn4T+Dpwfdd8EJgY2HQCODBPfQI4WFU1RF9J0goYKgi6X/D3AGcAU1X1T11pL72F4LntTgXO6drfUe+e99c2JVk/T12StAKG3SP4deD7gY9W1ZG+9keB85NMJVkL3AY82x02ArgPuCHJWUnOBG4E7gWoqueBp4EdSdYmuZLemUV7ljgnSdIirFlog+66gOuAt4DX+i4DuK6qvpBkCrgTuB94EtjW1/1uYBO9s4EAPtu1zdlGLxjeBF4Grq4qV4IlaQUtGARV9RKQ49QfBzbPUyvgpu5xrPp+4JIhxilJWibeYkKSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGrdm3APQ6Eze/Ngx2/ff/pEVHomk1cQ9AklqnEEgSY0zCCSpcQaBJDXOIJCkxg0VBEmuTzKd5K0k9w7ULk2yL8nhJE8kObuvliR3JHmje3w6Sfrqk12fw917XDaymUmShjLsHsHfAZ8CfqO/MckG4BHgVuA0YBp4sG+T7cAVwBbgAuBy4Lq++gPAU8DpwC3Aw0k2LnYSkqQTN1QQVNUjVfXbwBsDpauAvVX1UFUdBXYCW5Js7urXALuq6pWqehXYBVwLkORc4CJgR1Udqao9wHPA1NKmJElajKWuEZwHPDP3oqoOAS907e+od8/7ay9W1YF56m+TZHt3eGp6ZmZmicOWJM1ZahCsA2YH2maB9fPUZ4F13TrBQn3fpqp2V9XWqtq6caNHjyRpVJYaBAeBiYG2CeDAPPUJ4GBV1RB9JUkrYKlBsJfeQjAASU4Fzuna31HvnvfXNiVZP09dkrQChj19dE2StcApwClJ1iZZAzwKnJ9kqqvfBjxbVfu6rvcBNyQ5K8mZwI3AvQBV9TzwNLCje78r6Z1ZtGd005MkLWTYPYKPA0eAm4Gf7p5/vKpm6J3l81+BN4EfBLb19bsb+D16ZwP9b+Cxrm3ONmBr1/d24OruPSVJK2So21BX1U56p4Yeq/Y4sHmeWgE3dY9j1fcDlwwzBknS8vAWE5LUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaN9QtJiSAyZsfO2b7/ts/ssIjkTRK7hFIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjvLJY3/Lmu6IZvKpZGgX3CCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapzXEUj419fUNvcIJKlxBoEkNW7sh4aSnAbcA/w74HXgv1TVb413VNLK8JCUvhWMPQiAu4CvA2cAFwKPJXmmqvaOdVSS1IixBkGSU4Ep4PyqOgj8RZLfBX4GuHmcY5NOFuPa63BvZ/VIVY3vw5MfAP6qqr69r+1jwMVV9dGBbbcD27uX3wf87YoNdGk20DvkdTJybqvXyTw/5za/s6tq42DjuA8NrQNmB9pmgfWDG1bVbmD3SgxqlJJMV9XWcY9jOTi31etknp9zW7xxnzV0EJgYaJsADoxhLJLUpHEHwfPAmiTv62vbArhQLEkrZKxBUFWHgEeATyQ5NckPAz8O/OY4xzViq+5w1iI4t9XrZJ6fc1uksS4WwzevI/gN4EeAN4CbvY5AklbO2INAkjRe414jkCSNmUEgSY0zCJZBkm9Lck+Sl5IcSPJUkg+Pe1yjluR9SY4muX/cYxmlJNuS/J8kh5K8kOQD4x7TqCSZTPL7Sd5M8lqSO5OM+3qiE5Lk+iTTSd5Kcu9A7dIk+5IcTvJEkrPHNMwTMt/ckvxQkj9O8v+SzCR5KMl3L/XzDILlsQb4KnAx8B3ArcAXk0yOc1DL4C7gr8c9iFFK8iPAHcC/p3dh4weBF8c6qNH6NeDvge+md2+vi4GfH+eAluDvgE/RO9nkm5JsoHc24q3AacA08OCKj25pjjk34D30zhyaBM6md83V55b6Yavyl8C3uu602J19TV9K8hXg/cD+cYxp1JJsA/4B+CvgveMdzUj9EvCJqvpf3etXxzmYZfC9wJ1VdRR4LckfAueNeUwnpKoeAUiyFfievtJVwN6qeqir7wReT7K5qvat+EBPwHxzq6o/6N8uyZ3Any/189wjWAFJzgDO5SS5UC7JBPAJ4MZxj2WUkpwCbAU2Jvm/SV7pDp18+0J9V5FfBbYl+VdJzgI+DPzhmMc0aucBz8y96H6YvcAqDbwFfJARfK8YBMssybuBLwCfXy2/RobwSeCeqvrquAcyYmcA7wauBj5A79DJDwAfH+OYRu3P6X0h/iPwCr3DJr89zgEtg6HvYbaaJbkAuA34z0t9L4NgGSV5F72rpL8OXD/m4YxEkguBy4BfGfNQlsOR7r//o6q+VlWvA/8N+NExjmlkun+Pf0Tv+Pmp9O5k+R56ayInk5P+HmZJ3gv8AfCfqup/LvX9DIJlkiT0/vLaGcBUVf3TmIc0KpfQW6h6OclrwMeAqSR/M85BjUJVvUnvV/LJepXlacC/prdG8FZVvUFvofGkCLo+e+ndswz45t89OYeT59Ds2cDjwCeraiS34zEIls+vA98PfLSqjiy08Sqym97/VBd2j88AjwEfGt+QRupzwH9M8l1J3gP8AvCl8Q5pNLo9nK8AP5dkTZLvBK6h73j6atLNYS1wCnBKkrXdqbCPAucnmerqtwHPrqZDs/PNrVvX+VPgrqr6zMg+z1tMjF6X2PuBt4B/7itdV1VfGMuglkl3RsZ7q+qnxz2WUejWdH4V+EngKPBF4KbuLJtVrzu099/p/WL+BvAE8B+q6u/HOKwT0v3b2zHQ/EtVtTPJZcCd9E6xfBK4tqr2r+wIT9x8c6O3t7oTONRfqKp1S/o8g0CS2uahIUlqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLj/j8L5hIHDe593QAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "from scipy.stats import geom, expon\n",
        "geom_distrib=geom(0.5).rvs(10000, random_state=42)\n",
        "expon_distrib=expon(scale=1).rvs(10000, random_state=42)\n",
        "plt.hist(geom_distrib, bins=50)\n",
        "plt.show()\n",
        "plt.hist(expon_distrib, bins=50)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a7YsxRjVemy6"
      },
      "source": [
        "# Exercise solutions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Cudq9onemy6"
      },
      "source": [
        "## 1."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4HDjFyK4emy6"
      },
      "source": [
        "Question: Try a Support Vector Machine regressor (`sklearn.svm.SVR`), with various hyperparameters such as `kernel=\"linear\"` (with various values for the `C` hyperparameter) or `kernel=\"rbf\"` (with various values for the `C` and `gamma` hyperparameters). Don't worry about what these hyperparameters mean for now. How does the best `SVR` predictor perform?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TsN1KDnjemy6"
      },
      "source": [
        "**Warning**: the following cell may take close to 30 minutes to run, or more depending on your hardware."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ebsYo4j9emy6",
        "outputId": "c25f59fb-9919-4529-e59a-d23c9ffad793"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n",
            "[CV] C=10.0, kernel=linear ...........................................\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV] ............................ C=10.0, kernel=linear, total=   3.9s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    3.9s remaining:    0.0s\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV] ............................ C=10.0, kernel=linear, total=   3.9s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=10.0, kernel=linear, total=   4.6s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=10.0, kernel=linear, total=   4.2s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=10.0, kernel=linear, total=   4.5s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.1s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.2s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.3s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.0s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   3.9s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   3.9s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   4.0s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   4.0s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   4.0s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   3.9s\n",
            "[CV] C=300.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=300.0, kernel=linear, total=   4.1s\n",
            "<<434 more lines>>\n",
            "[CV] C=1000.0, gamma=0.1, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.1, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.1, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.1, kernel=rbf, total=   6.8s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.8s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done 250 out of 250 | elapsed: 26.4min finished\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=SVR(),\n",
              "             param_grid=[{'C': [10.0, 30.0, 100.0, 300.0, 1000.0, 3000.0,\n",
              "                                10000.0, 30000.0],\n",
              "                          'kernel': ['linear']},\n",
              "                         {'C': [1.0, 3.0, 10.0, 30.0, 100.0, 300.0, 1000.0],\n",
              "                          'gamma': [0.01, 0.03, 0.1, 0.3, 1.0, 3.0],\n",
              "                          'kernel': ['rbf']}],\n",
              "             scoring='neg_mean_squared_error', verbose=2)"
            ]
          },
          "execution_count": 117,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid = [\n",
        "        {'kernel': ['linear'], 'C': [10., 30., 100., 300., 1000., 3000., 10000., 30000.0]},\n",
        "        {'kernel': ['rbf'], 'C': [1.0, 3.0, 10., 30., 100., 300., 1000.0],\n",
        "         'gamma': [0.01, 0.03, 0.1, 0.3, 1.0, 3.0]},\n",
        "    ]\n",
        "\n",
        "svm_reg = SVR()\n",
        "grid_search = GridSearchCV(svm_reg, param_grid, cv=5, scoring='neg_mean_squared_error', verbose=2)\n",
        "grid_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u8rk20d4emy6"
      },
      "source": [
        "The best model achieves the following score (evaluated using 5-fold cross validation):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G7wt5lF6emy6",
        "outputId": "bc676c18-ec14-4b5b-b37b-9d8938183db6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "70363.84006944533"
            ]
          },
          "execution_count": 118,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "negative_mse = grid_search.best_score_\n",
        "rmse = np.sqrt(-negative_mse)\n",
        "rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SC_CZ2nLemy6"
      },
      "source": [
        "That's much worse than the `RandomForestRegressor`. Let's check the best hyperparameters found:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GEmFxsFsemy6",
        "outputId": "8670336d-bdf1-41b1-bca2-95c5e98ee842"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'C': 30000.0, 'kernel': 'linear'}"
            ]
          },
          "execution_count": 119,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search.best_params_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D-Z9acdCemy6"
      },
      "source": [
        "The linear kernel seems better than the RBF kernel. Notice that the value of `C` is the maximum tested value. When this happens you definitely want to launch the grid search again with higher values for `C` (removing the smallest values), because it is likely that higher values of `C` will be better."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJGp3FETemy6"
      },
      "source": [
        "## 2."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mVIL3d9Oemy6"
      },
      "source": [
        "Question: Try replacing `GridSearchCV` with `RandomizedSearchCV`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CctabXnIemy6"
      },
      "source": [
        "**Warning**: the following cell may take close to 45 minutes to run, or more depending on your hardware."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VnXIsrUcemy6",
        "outputId": "b2be3698-6eb3-43c4-d2c9-d861f57851ff"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.2s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    4.2s remaining:    0.0s\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.0s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n",
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.5s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n",
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.5s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n",
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.3s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   8.6s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   9.1s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   8.8s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   8.9s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   9.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   6.9s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=432.37884813148855, gamma=0.15416196746656105, kernel=linear ..\n",
            "[CV]  C=432.37884813148855, gamma=0.15416196746656105, kernel=linear, total=   4.6s\n",
            "<<434 more lines>>\n",
            "[CV] C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf .......\n",
            "[CV]  C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf, total=  25.2s\n",
            "[CV] C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf .......\n",
            "[CV]  C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf, total=  23.2s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.7s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.7s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.7s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.8s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.6s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=  10.0s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=   9.7s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=   8.9s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=  10.4s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=   9.3s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  25.8s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  18.5s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  28.3s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  20.8s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  15.6s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done 250 out of 250 | elapsed: 44.0min finished\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=5, estimator=SVR(), n_iter=50,\n",
              "                   param_distributions={'C': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f9bd002c790>,\n",
              "                                        'gamma': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f9bd002cb10>,\n",
              "                                        'kernel': ['linear', 'rbf']},\n",
              "                   random_state=42, scoring='neg_mean_squared_error',\n",
              "                   verbose=2)"
            ]
          },
          "execution_count": 120,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from scipy.stats import expon, reciprocal\n",
        "\n",
        "# see https://docs.scipy.org/doc/scipy/reference/stats.html\n",
        "# for `expon()` and `reciprocal()` documentation and more probability distribution functions.\n",
        "\n",
        "# Note: gamma is ignored when kernel is \"linear\"\n",
        "param_distribs = {\n",
        "        'kernel': ['linear', 'rbf'],\n",
        "        'C': reciprocal(20, 200000),\n",
        "        'gamma': expon(scale=1.0),\n",
        "    }\n",
        "\n",
        "svm_reg = SVR()\n",
        "rnd_search = RandomizedSearchCV(svm_reg, param_distributions=param_distribs,\n",
        "                                n_iter=50, cv=5, scoring='neg_mean_squared_error',\n",
        "                                verbose=2, random_state=42)\n",
        "rnd_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eV86MYMbemy6"
      },
      "source": [
        "The best model achieves the following score (evaluated using 5-fold cross validation):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6WPRAttlemy6",
        "outputId": "67e2ccc0-ddfe-4164-d645-ac801faed492"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "54767.960710084146"
            ]
          },
          "execution_count": 121,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "negative_mse = rnd_search.best_score_\n",
        "rmse = np.sqrt(-negative_mse)\n",
        "rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ISsrewILemy6"
      },
      "source": [
        "Now this is much closer to the performance of the `RandomForestRegressor` (but not quite there yet). Let's check the best hyperparameters found:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "roG5cek9emy6",
        "outputId": "bf901904-811f-4d41-a8db-8110a6d52b0f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'C': 157055.10989448498, 'gamma': 0.26497040005002437, 'kernel': 'rbf'}"
            ]
          },
          "execution_count": 122,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "rnd_search.best_params_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y3JBXjcTemy7"
      },
      "source": [
        "This time the search found a good set of hyperparameters for the RBF kernel. Randomized search tends to find better hyperparameters than grid search in the same amount of time."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RgqkinA1emy7"
      },
      "source": [
        "Let's look at the exponential distribution we used, with `scale=1.0`. Note that some samples are much larger or smaller than 1.0, but when you look at the log of the distribution, you can see that most values are actually concentrated roughly in the range of exp(-2) to exp(+2), which is about 0.1 to 7.4."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8vgWlI90emy7",
        "outputId": "20b971bb-a7c2-4c88-e506-15878c77652b"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "expon_distrib = expon(scale=1.)\n",
        "samples = expon_distrib.rvs(10000, random_state=42)\n",
        "plt.figure(figsize=(10, 4))\n",
        "plt.subplot(121)\n",
        "plt.title(\"Exponential distribution (scale=1.0)\")\n",
        "plt.hist(samples, bins=50)\n",
        "plt.subplot(122)\n",
        "plt.title(\"Log of this distribution\")\n",
        "plt.hist(np.log(samples), bins=50)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OYc43Znwemy7"
      },
      "source": [
        "The distribution we used for `C` looks quite different: the scale of the samples is picked from a uniform distribution within a given range, which is why the right graph, which represents the log of the samples, looks roughly constant. This distribution is useful when you don't have a clue of what the target scale is:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0bnDPqVsemy7",
        "outputId": "0f6bfacb-c174-4519-e7e4-b6de229d1281"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "reciprocal_distrib = reciprocal(20, 200000)\n",
        "samples = reciprocal_distrib.rvs(10000, random_state=42)\n",
        "plt.figure(figsize=(10, 4))\n",
        "plt.subplot(121)\n",
        "plt.title(\"Reciprocal distribution (scale=1.0)\")\n",
        "plt.hist(samples, bins=50)\n",
        "plt.subplot(122)\n",
        "plt.title(\"Log of this distribution\")\n",
        "plt.hist(np.log(samples), bins=50)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5Ur2ufd-emy7"
      },
      "source": [
        "The reciprocal distribution is useful when you have no idea what the scale of the hyperparameter should be (indeed, as you can see on the figure on the right, all scales are equally likely, within the given range), whereas the exponential distribution is best when you know (more or less) what the scale of the hyperparameter should be."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l2zg3893emy7"
      },
      "source": [
        "## 3."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vtJQpHd0emy7"
      },
      "source": [
        "Question: Try adding a transformer in the preparation pipeline to select only the most important attributes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M2HNyxqaemy7"
      },
      "outputs": [],
      "source": [
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "def indices_of_top_k(arr, k):\n",
        "    return np.sort(np.argpartition(np.array(arr), -k)[-k:])\n",
        "\n",
        "class TopFeatureSelector(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, feature_importances, k):\n",
        "        self.feature_importances = feature_importances\n",
        "        self.k = k\n",
        "    def fit(self, X, y=None):\n",
        "        self.feature_indices_ = indices_of_top_k(self.feature_importances, self.k)\n",
        "        return self\n",
        "    def transform(self, X):\n",
        "        return X[:, self.feature_indices_]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IESxScFZemy7"
      },
      "source": [
        "Note: this feature selector assumes that you have already computed the feature importances somehow (for example using a `RandomForestRegressor`). You may be tempted to compute them directly in the `TopFeatureSelector`'s `fit()` method, however this would likely slow down grid/randomized search since the feature importances would have to be computed for every hyperparameter combination (unless you implement some sort of cache)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f9XRr8Nsemy7"
      },
      "source": [
        "Let's define the number of top features we want to keep:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4LfIcCEHemy7"
      },
      "outputs": [],
      "source": [
        "k = 5"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pyYx_UZ6emy7"
      },
      "source": [
        "Now let's look for the indices of the top k features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H2oeKLnRemy7",
        "outputId": "59f4fd68-52b5-41c4-98c1-62d0374b7150"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 0,  1,  7,  9, 12])"
            ]
          },
          "execution_count": 127,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "top_k_feature_indices = indices_of_top_k(feature_importances, k)\n",
        "top_k_feature_indices"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XHGkvZQ6emy8",
        "outputId": "84c2da86-8dcb-412b-eb18-bc520876e836"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['longitude', 'latitude', 'median_income', 'pop_per_hhold',\n",
              "       'INLAND'], dtype='<U18')"
            ]
          },
          "execution_count": 128,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.array(attributes)[top_k_feature_indices]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GVeVK11Lemy8"
      },
      "source": [
        "Let's double check that these are indeed the top k features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wTEcv9Ftemy8",
        "outputId": "cc97cc90-de64-43b7-afaf-47b60e83d136"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[(0.36615898061813423, 'median_income'),\n",
              " (0.16478099356159054, 'INLAND'),\n",
              " (0.10879295677551575, 'pop_per_hhold'),\n",
              " (0.07334423551601243, 'longitude'),\n",
              " (0.06290907048262032, 'latitude')]"
            ]
          },
          "execution_count": 129,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sorted(zip(feature_importances, attributes), reverse=True)[:k]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kgT3YzpGemy8"
      },
      "source": [
        "Looking good... Now let's create a new pipeline that runs the previously defined preparation pipeline, and adds top k feature selection:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2C0rukDXemy8"
      },
      "outputs": [],
      "source": [
        "preparation_and_feature_selection_pipeline = Pipeline([\n",
        "    ('preparation', full_pipeline),\n",
        "    ('feature_selection', TopFeatureSelector(feature_importances, k))\n",
        "])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Oanqxy14emy8"
      },
      "outputs": [],
      "source": [
        "housing_prepared_top_k_features = preparation_and_feature_selection_pipeline.fit_transform(housing)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5bDSPyOcemy8"
      },
      "source": [
        "Let's look at the features of the first 3 instances:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hXrXRHnuemy8",
        "outputId": "e5e7542d-df3a-4993-d681-bb2b308af5d0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962, -0.61493744, -0.08649871,  0.        ],\n",
              "       [-1.17602483,  0.6596948 ,  1.33645936, -0.03353391,  0.        ],\n",
              "       [ 1.18684903, -1.34218285, -0.5320456 , -0.09240499,  0.        ]])"
            ]
          },
          "execution_count": 132,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared_top_k_features[0:3]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MWA4QAzoemy8"
      },
      "source": [
        "Now let's double check that these are indeed the top k features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sJk_K754emy8",
        "outputId": "dde64d63-595d-4ed3-cc76-d9b22bd53446"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962, -0.61493744, -0.08649871,  0.        ],\n",
              "       [-1.17602483,  0.6596948 ,  1.33645936, -0.03353391,  0.        ],\n",
              "       [ 1.18684903, -1.34218285, -0.5320456 , -0.09240499,  0.        ]])"
            ]
          },
          "execution_count": 133,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared[0:3, top_k_feature_indices]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zUVjZRAMemy8"
      },
      "source": [
        "Works great!  :)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DV8IZvd9emy8"
      },
      "source": [
        "## 4."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kTUhS4h8emy8"
      },
      "source": [
        "Question: Try creating a single pipeline that does the full data preparation plus the final prediction."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Zhflf7Temy8"
      },
      "outputs": [],
      "source": [
        "prepare_select_and_predict_pipeline = Pipeline([\n",
        "    ('preparation', full_pipeline),\n",
        "    ('feature_selection', TopFeatureSelector(feature_importances, k)),\n",
        "    ('svm_reg', SVR(**rnd_search.best_params_))\n",
        "])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rOvfUangemy8",
        "outputId": "5bd47168-d794-4d96-c6aa-a69c63168fb2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preparation',\n",
              "                 ColumnTransformer(transformers=[('num',\n",
              "                                                  Pipeline(steps=[('imputer',\n",
              "                                                                   SimpleImputer(strategy='median')),\n",
              "                                                                  ('attribs_adder',\n",
              "                                                                   CombinedAttributesAdder()),\n",
              "                                                                  ('std_scaler',\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  ['longitude', 'latitude',\n",
              "                                                   'housing_median_age',\n",
              "                                                   'total_rooms',\n",
              "                                                   'total_bedrooms',\n",
              "                                                   'population', 'households',\n",
              "                                                   'median_income']),\n",
              "                                                 ('cat', OneHotEncoder(...\n",
              "                 TopFeatureSelector(feature_importances=array([7.33442355e-02, 6.29090705e-02, 4.11437985e-02, 1.46726854e-02,\n",
              "       1.41064835e-02, 1.48742809e-02, 1.42575993e-02, 3.66158981e-01,\n",
              "       5.64191792e-02, 1.08792957e-01, 5.33510773e-02, 1.03114883e-02,\n",
              "       1.64780994e-01, 6.02803867e-05, 1.96041560e-03, 2.85647464e-03]),\n",
              "                                    k=5)),\n",
              "                ('svm_reg',\n",
              "                 SVR(C=157055.10989448498, gamma=0.26497040005002437))])"
            ]
          },
          "execution_count": 135,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "prepare_select_and_predict_pipeline.fit(housing, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zqelfn19emy8"
      },
      "source": [
        "Let's try the full pipeline on a few instances:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "am4dIxrGemy8",
        "outputId": "088f12c2-0fcf-49bf-b640-d664361a71bb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Predictions:\t [203214.28978849 371846.88152572 173295.65441612  47328.3970888 ]\n",
            "Labels:\t\t [286600.0, 340600.0, 196900.0, 46300.0]\n"
          ]
        }
      ],
      "source": [
        "some_data = housing.iloc[:4]\n",
        "some_labels = housing_labels.iloc[:4]\n",
        "\n",
        "print(\"Predictions:\\t\", prepare_select_and_predict_pipeline.predict(some_data))\n",
        "print(\"Labels:\\t\\t\", list(some_labels))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZwJJVZ2Jemy9"
      },
      "source": [
        "Well, the full pipeline seems to work fine. Of course, the predictions are not fantastic: they would be better if we used the best `RandomForestRegressor` that we found earlier, rather than the best `SVR`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yqMaxChremy9"
      },
      "source": [
        "## 5."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PFAu3TYKemy9"
      },
      "source": [
        "Question: Automatically explore some preparation options using `GridSearchCV`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x9qqhKWkemy9"
      },
      "source": [
        "**Warning**: the following cell may take close to 45 minutes to run, or more depending on your hardware."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C7m4h9heemy9"
      },
      "source": [
        "**Note:** In the code below, I've set the `OneHotEncoder`'s `handle_unknown` hyperparameter to `'ignore'`, to avoid warnings during training. Without this, the `OneHotEncoder` would default to `handle_unknown='error'`, meaning that it would raise an error when transforming any data containing a category it didn't see during training. If we kept the default, then the `GridSearchCV` would run into errors during training when evaluating the folds in which not all the categories are in the training set. This is likely to happen since there's only one sample in the `'ISLAND'` category, and it may end up in the test set in some of the folds. So some folds would just be dropped by the `GridSearchCV`, and it's best to avoid that."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xWt_Ajx-emy9",
        "outputId": "50cedaa7-e60a-43c5-9fe4-a45c8b97d535"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 48 candidates, totalling 240 fits\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.2s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    4.2s remaining:    0.0s\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   5.2s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.8s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   5.1s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.9s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.3s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.2s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.6s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.3s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.4s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.8s\n",
            "[CV] feature_selection__k=2, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=2, preparation__num__imputer__strategy=mean, total=   4.8s\n",
            "<<414 more lines>>\n",
            "[CV] feature_selection__k=15, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=15, preparation__num__imputer__strategy=most_frequent, total=  15.8s\n",
            "[CV] feature_selection__k=15, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=15, preparation__num__imputer__strategy=most_frequent, total=  19.8s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  17.9s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  19.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  18.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  19.1s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  16.4s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  17.9s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  19.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  20.5s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  17.1s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  20.3s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  16.7s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  19.4s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  17.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  17.5s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  19.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done 240 out of 240 | elapsed: 42.3min finished\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=Pipeline(steps=[('preparation',\n",
              "                                        ColumnTransformer(transformers=[('num',\n",
              "                                                                         Pipeline(steps=[('imputer',\n",
              "                                                                                          SimpleImputer(strategy='median')),\n",
              "                                                                                         ('attribs_adder',\n",
              "                                                                                          CombinedAttributesAdder()),\n",
              "                                                                                         ('std_scaler',\n",
              "                                                                                          StandardScaler())]),\n",
              "                                                                         ['longitude',\n",
              "                                                                          'latitude',\n",
              "                                                                          'housing_median_age',\n",
              "                                                                          'total_rooms',\n",
              "                                                                          'total_bedrooms',\n",
              "                                                                          'population',\n",
              "                                                                          'households',\n",
              "                                                                          'median_inc...\n",
              "       5.64191792e-02, 1.08792957e-01, 5.33510773e-02, 1.03114883e-02,\n",
              "       1.64780994e-01, 6.02803867e-05, 1.96041560e-03, 2.85647464e-03]),\n",
              "                                                           k=5)),\n",
              "                                       ('svm_reg',\n",
              "                                        SVR(C=157055.10989448498,\n",
              "                                            gamma=0.26497040005002437))]),\n",
              "             param_grid=[{'feature_selection__k': [1, 2, 3, 4, 5, 6, 7, 8, 9,\n",
              "                                                   10, 11, 12, 13, 14, 15, 16],\n",
              "                          'preparation__num__imputer__strategy': ['mean',\n",
              "                                                                  'median',\n",
              "                                                                  'most_frequent']}],\n",
              "             scoring='neg_mean_squared_error', verbose=2)"
            ]
          },
          "execution_count": 137,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "full_pipeline.named_transformers_[\"cat\"].handle_unknown = 'ignore'\n",
        "\n",
        "param_grid = [{\n",
        "    'preparation__num__imputer__strategy': ['mean', 'median', 'most_frequent'],\n",
        "    'feature_selection__k': list(range(1, len(feature_importances) + 1))\n",
        "}]\n",
        "\n",
        "grid_search_prep = GridSearchCV(prepare_select_and_predict_pipeline, param_grid, cv=5,\n",
        "                                scoring='neg_mean_squared_error', verbose=2)\n",
        "grid_search_prep.fit(housing, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RPkKmkVOemy9",
        "outputId": "320eb0f1-b23c-463c-815d-ebffa6f02376"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'feature_selection__k': 15,\n",
              " 'preparation__num__imputer__strategy': 'most_frequent'}"
            ]
          },
          "execution_count": 138,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search_prep.best_params_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K9x19P_Kemy9"
      },
      "source": [
        "The best imputer strategy is `most_frequent` and apparently almost all features are useful (15 out of 16). The last one (`ISLAND`) seems to just add some noise."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yfz0s1_semy9"
      },
      "source": [
        "Congratulations! You already know quite a lot about Machine Learning. :)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "nav_menu": {
      "height": "279px",
      "width": "309px"
    },
    "toc": {
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": "block",
      "toc_window_display": false
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}